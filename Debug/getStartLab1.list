
getStartLab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005818  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080059e8  080059e8  000159e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b48  08005b48  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005b48  08005b48  00015b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b50  08005b50  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b50  08005b50  00015b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf0  20000060  08005bb8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c50  08005bb8  00024c50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018aec  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034d1  00000000  00000000  00038bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  0003c090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001001  00000000  00000000  0003d520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000332c  00000000  00000000  0003e521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000177c7  00000000  00000000  0004184d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dade5  00000000  00000000  00059014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005990  00000000  00000000  00133dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013978c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080059d0 	.word	0x080059d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080059d0 	.word	0x080059d0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fb9c 	bl	8000c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f850 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f8ea 	bl	80006f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f8be 	bl	800069c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f002 fbf4 	bl	8002d0c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000524:	4a15      	ldr	r2, [pc, #84]	; (800057c <main+0x70>)
 8000526:	2100      	movs	r1, #0
 8000528:	4815      	ldr	r0, [pc, #84]	; (8000580 <main+0x74>)
 800052a:	f002 fc39 	bl	8002da0 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a14      	ldr	r2, [pc, #80]	; (8000584 <main+0x78>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000534:	4a14      	ldr	r2, [pc, #80]	; (8000588 <main+0x7c>)
 8000536:	2100      	movs	r1, #0
 8000538:	4814      	ldr	r0, [pc, #80]	; (800058c <main+0x80>)
 800053a:	f002 fc31 	bl	8002da0 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a13      	ldr	r2, [pc, #76]	; (8000590 <main+0x84>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000544:	4a13      	ldr	r2, [pc, #76]	; (8000594 <main+0x88>)
 8000546:	2100      	movs	r1, #0
 8000548:	4813      	ldr	r0, [pc, #76]	; (8000598 <main+0x8c>)
 800054a:	f002 fc29 	bl	8002da0 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a12      	ldr	r2, [pc, #72]	; (800059c <main+0x90>)
 8000552:	6013      	str	r3, [r2, #0]

  /* creation of Task4 */
  Task4Handle = osThreadNew(StartTask4, NULL, &Task4_attributes);
 8000554:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <main+0x94>)
 8000556:	2100      	movs	r1, #0
 8000558:	4812      	ldr	r0, [pc, #72]	; (80005a4 <main+0x98>)
 800055a:	f002 fc21 	bl	8002da0 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a11      	ldr	r2, [pc, #68]	; (80005a8 <main+0x9c>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of Task5 */
  Task5Handle = osThreadNew(StartTask5, NULL, &Task5_attributes);
 8000564:	4a11      	ldr	r2, [pc, #68]	; (80005ac <main+0xa0>)
 8000566:	2100      	movs	r1, #0
 8000568:	4811      	ldr	r0, [pc, #68]	; (80005b0 <main+0xa4>)
 800056a:	f002 fc19 	bl	8002da0 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <main+0xa8>)
 8000572:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000574:	f002 fbee 	bl	8002d54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0x6c>
 800057a:	bf00      	nop
 800057c:	08005a7c 	.word	0x08005a7c
 8000580:	080007d1 	.word	0x080007d1
 8000584:	200000c4 	.word	0x200000c4
 8000588:	08005aa0 	.word	0x08005aa0
 800058c:	08000819 	.word	0x08000819
 8000590:	200000c8 	.word	0x200000c8
 8000594:	08005ac4 	.word	0x08005ac4
 8000598:	08000869 	.word	0x08000869
 800059c:	200000cc 	.word	0x200000cc
 80005a0:	08005ae8 	.word	0x08005ae8
 80005a4:	080008a1 	.word	0x080008a1
 80005a8:	200000d0 	.word	0x200000d0
 80005ac:	08005b0c 	.word	0x08005b0c
 80005b0:	080008fd 	.word	0x080008fd
 80005b4:	200000d4 	.word	0x200000d4

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2234      	movs	r2, #52	; 0x34
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 f918 	bl	80057fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <SystemClock_Config+0xdc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a2b      	ldr	r2, [pc, #172]	; (8000694 <SystemClock_Config+0xdc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <SystemClock_Config+0xdc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	4b26      	ldr	r3, [pc, #152]	; (8000698 <SystemClock_Config+0xe0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a25      	ldr	r2, [pc, #148]	; (8000698 <SystemClock_Config+0xe0>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <SystemClock_Config+0xe0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800062c:	23b4      	movs	r3, #180	; 0xb4
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000638:	2302      	movs	r3, #2
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4618      	mov	r0, r3
 8000642:	f001 f9d3 	bl	80019ec <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800064c:	f000 f9ac 	bl	80009a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000650:	f000 fe00 	bl	8001254 <HAL_PWREx_EnableOverDrive>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800065a:	f000 f9a5 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	2105      	movs	r1, #5
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fe39 	bl	80012f4 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000688:	f000 f98e 	bl	80009a8 <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3750      	adds	r7, #80	; 0x50
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_USART2_UART_Init+0x50>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f001 feca 	bl	800246c <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006de:	f000 f963 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000007c 	.word	0x2000007c
 80006ec:	40004400 	.word	0x40004400

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <MX_GPIO_Init+0xd4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a2d      	ldr	r2, [pc, #180]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a26      	ldr	r2, [pc, #152]	; (80007c4 <MX_GPIO_Init+0xd4>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a1f      	ldr	r2, [pc, #124]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <MX_GPIO_Init+0xd4>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_GPIO_Init+0xd4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800077c:	4812      	ldr	r0, [pc, #72]	; (80007c8 <MX_GPIO_Init+0xd8>)
 800077e:	f000 fd35 	bl	80011ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_GPIO_Init+0xdc>)
 8000798:	f000 fb7c 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800079c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_GPIO_Init+0xd8>)
 80007b6:	f000 fb6d 	bl	8000e94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	; 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020400 	.word	0x40020400
 80007cc:	40020800 	.word	0x40020800

080007d0 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  for(;;)
  {

	  //HAL_UART_Transmit(&huart2, dataTask1, sizeof(dataTask1), 1000);
	 // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_4);
 80007d8:	2110      	movs	r1, #16
 80007da:	480e      	ldr	r0, [pc, #56]	; (8000814 <StartTask1+0x44>)
 80007dc:	f000 fd1f 	bl	800121e <HAL_GPIO_TogglePin>
	  osDelay(10000);
 80007e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80007e4:	f002 fb6e 	bl	8002ec4 <osDelay>
	  osDelay(2000);
 80007e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007ec:	f002 fb6a 	bl	8002ec4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_4);//Green LED
 80007f0:	2110      	movs	r1, #16
 80007f2:	4808      	ldr	r0, [pc, #32]	; (8000814 <StartTask1+0x44>)
 80007f4:	f000 fd13 	bl	800121e <HAL_GPIO_TogglePin>
      osDelay(10000);
 80007f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80007fc:	f002 fb62 	bl	8002ec4 <osDelay>
      HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_4);
 8000800:	2110      	movs	r1, #16
 8000802:	4804      	ldr	r0, [pc, #16]	; (8000814 <StartTask1+0x44>)
 8000804:	f000 fd0b 	bl	800121e <HAL_GPIO_TogglePin>
      osDelay(3000);
 8000808:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800080c:	f002 fb5a 	bl	8002ec4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_4);
 8000810:	e7e2      	b.n	80007d8 <StartTask1+0x8>
 8000812:	bf00      	nop
 8000814:	40020400 	.word	0x40020400

08000818 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_UART_Transmit(&huart2, dataTask2, sizeof(dataTask2), 1000);
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);
 8000820:	2120      	movs	r1, #32
 8000822:	4810      	ldr	r0, [pc, #64]	; (8000864 <StartTask2+0x4c>)
 8000824:	f000 fcfb 	bl	800121e <HAL_GPIO_TogglePin>
	  osDelay(10000);
 8000828:	f242 7010 	movw	r0, #10000	; 0x2710
 800082c:	f002 fb4a 	bl	8002ec4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);//Orange LED
 8000830:	2120      	movs	r1, #32
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <StartTask2+0x4c>)
 8000834:	f000 fcf3 	bl	800121e <HAL_GPIO_TogglePin>
	  osDelay(2000);
 8000838:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800083c:	f002 fb42 	bl	8002ec4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);//Orange LED
 8000840:	2120      	movs	r1, #32
 8000842:	4808      	ldr	r0, [pc, #32]	; (8000864 <StartTask2+0x4c>)
 8000844:	f000 fceb 	bl	800121e <HAL_GPIO_TogglePin>
	  osDelay(10000);
 8000848:	f242 7010 	movw	r0, #10000	; 0x2710
 800084c:	f002 fb3a 	bl	8002ec4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);//Orange LED
 8000850:	2120      	movs	r1, #32
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <StartTask2+0x4c>)
 8000854:	f000 fce3 	bl	800121e <HAL_GPIO_TogglePin>
	  osDelay(3000);
 8000858:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800085c:	f002 fb32 	bl	8002ec4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);
 8000860:	e7de      	b.n	8000820 <StartTask2+0x8>
 8000862:	bf00      	nop
 8000864:	40020400 	.word	0x40020400

08000868 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_UART_Transmit(&huart2, dataTask3, sizeof(dataTask3), 1000);
	  osDelay(10000);
 8000870:	f242 7010 	movw	r0, #10000	; 0x2710
 8000874:	f002 fb26 	bl	8002ec4 <osDelay>
	  osDelay(2000);
 8000878:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800087c:	f002 fb22 	bl	8002ec4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);//Red LED
 8000880:	2108      	movs	r1, #8
 8000882:	4806      	ldr	r0, [pc, #24]	; (800089c <StartTask3+0x34>)
 8000884:	f000 fccb 	bl	800121e <HAL_GPIO_TogglePin>
	  osDelay(10000);
 8000888:	f242 7010 	movw	r0, #10000	; 0x2710
 800088c:	f002 fb1a 	bl	8002ec4 <osDelay>
	  osDelay(3000);
 8000890:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000894:	f002 fb16 	bl	8002ec4 <osDelay>
	  osDelay(10000);
 8000898:	e7ea      	b.n	8000870 <StartTask3+0x8>
 800089a:	bf00      	nop
 800089c:	40020400 	.word	0x40020400

080008a0 <StartTask4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask4 */
void StartTask4(void *argument)
{
 80008a0:	b5b0      	push	{r4, r5, r7, lr}
 80008a2:	b08c      	sub	sp, #48	; 0x30
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask4 */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t dataTask4[] = "Task 5: I toggle GPIOB pin 10.\r\n";
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <StartTask4+0x4c>)
 80008aa:	f107 040c 	add.w	r4, r7, #12
 80008ae:	461d      	mov	r5, r3
 80008b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b8:	682b      	ldr	r3, [r5, #0]
 80008ba:	7023      	strb	r3, [r4, #0]
	  if(flag)
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <StartTask4+0x50>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d00f      	beq.n	80008e4 <StartTask4+0x44>
	  {
	     HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_10);
 80008c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c8:	480a      	ldr	r0, [pc, #40]	; (80008f4 <StartTask4+0x54>)
 80008ca:	f000 fca8 	bl	800121e <HAL_GPIO_TogglePin>
	 	 flag = 0;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <StartTask4+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
	     HAL_UART_Transmit(&huart2, dataTask4, sizeof(dataTask4), 1000);
 80008d4:	f107 010c 	add.w	r1, r7, #12
 80008d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008dc:	2221      	movs	r2, #33	; 0x21
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <StartTask4+0x58>)
 80008e0:	f001 fe14 	bl	800250c <HAL_UART_Transmit>
	 	}
	 	osDelay(100);
 80008e4:	2064      	movs	r0, #100	; 0x64
 80008e6:	f002 faed 	bl	8002ec4 <osDelay>
  {
 80008ea:	e7dd      	b.n	80008a8 <StartTask4+0x8>
 80008ec:	08005a10 	.word	0x08005a10
 80008f0:	200000d8 	.word	0x200000d8
 80008f4:	40020400 	.word	0x40020400
 80008f8:	2000007c 	.word	0x2000007c

080008fc <StartTask5>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask5 */
void StartTask5(void *argument)
{
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	b08e      	sub	sp, #56	; 0x38
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask5 */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t str1[] = "I am waiting push-button\r\n";
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <StartTask5+0x74>)
 8000906:	f107 041c 	add.w	r4, r7, #28
 800090a:	461d      	mov	r5, r3
 800090c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000910:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000914:	c403      	stmia	r4!, {r0, r1}
 8000916:	8022      	strh	r2, [r4, #0]
 8000918:	3402      	adds	r4, #2
 800091a:	0c13      	lsrs	r3, r2, #16
 800091c:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, str1, sizeof(str1), 1000);
 800091e:	f107 011c 	add.w	r1, r7, #28
 8000922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000926:	221b      	movs	r2, #27
 8000928:	4812      	ldr	r0, [pc, #72]	; (8000974 <StartTask5+0x78>)
 800092a:	f001 fdef 	bl	800250c <HAL_UART_Transmit>
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 800092e:	bf00      	nop
 8000930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000934:	4810      	ldr	r0, [pc, #64]	; (8000978 <StartTask5+0x7c>)
 8000936:	f000 fc41 	bl	80011bc <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1f7      	bne.n	8000930 <StartTask5+0x34>
	  flag = 1;
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <StartTask5+0x80>)
 8000942:	2201      	movs	r2, #1
 8000944:	601a      	str	r2, [r3, #0]
	  uint8_t str2[] = "I got push-button\r\n";
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <StartTask5+0x84>)
 8000948:	f107 0408 	add.w	r4, r7, #8
 800094c:	461d      	mov	r5, r3
 800094e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000952:	682b      	ldr	r3, [r5, #0]
 8000954:	6023      	str	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, str2, sizeof(str2), 1000);
 8000956:	f107 0108 	add.w	r1, r7, #8
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	2214      	movs	r2, #20
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <StartTask5+0x78>)
 8000962:	f001 fdd3 	bl	800250c <HAL_UART_Transmit>
	  osDelay(500);
 8000966:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800096a:	f002 faab 	bl	8002ec4 <osDelay>
  {
 800096e:	e7c9      	b.n	8000904 <StartTask5+0x8>
 8000970:	08005a34 	.word	0x08005a34
 8000974:	2000007c 	.word	0x2000007c
 8000978:	40020800 	.word	0x40020800
 800097c:	200000d8 	.word	0x200000d8
 8000980:	08005a50 	.word	0x08005a50

08000984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d101      	bne.n	800099a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000996:	f000 f97b 	bl	8000c90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40001000 	.word	0x40001000

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_MspInit+0x54>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <HAL_MspInit+0x54>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_MspInit+0x54>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_MspInit+0x54>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_MspInit+0x54>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_MspInit+0x54>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	210f      	movs	r1, #15
 80009f6:	f06f 0001 	mvn.w	r0, #1
 80009fa:	f000 fa21 	bl	8000e40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <HAL_UART_MspInit+0x84>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d12b      	bne.n	8000a86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a66:	230c      	movs	r3, #12
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a76:	2307      	movs	r3, #7
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_UART_MspInit+0x8c>)
 8000a82:	f000 fa07 	bl	8000e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08e      	sub	sp, #56	; 0x38
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4b33      	ldr	r3, [pc, #204]	; (8000b80 <HAL_InitTick+0xe4>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	4a32      	ldr	r2, [pc, #200]	; (8000b80 <HAL_InitTick+0xe4>)
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6413      	str	r3, [r2, #64]	; 0x40
 8000abc:	4b30      	ldr	r3, [pc, #192]	; (8000b80 <HAL_InitTick+0xe4>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	f003 0310 	and.w	r3, r3, #16
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac8:	f107 0210 	add.w	r2, r7, #16
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fd28 	bl	8001528 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d103      	bne.n	8000aea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ae2:	f000 fcf9 	bl	80014d8 <HAL_RCC_GetPCLK1Freq>
 8000ae6:	6378      	str	r0, [r7, #52]	; 0x34
 8000ae8:	e004      	b.n	8000af4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aea:	f000 fcf5 	bl	80014d8 <HAL_RCC_GetPCLK1Freq>
 8000aee:	4603      	mov	r3, r0
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af6:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <HAL_InitTick+0xe8>)
 8000af8:	fba2 2303 	umull	r2, r3, r2, r3
 8000afc:	0c9b      	lsrs	r3, r3, #18
 8000afe:	3b01      	subs	r3, #1
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_InitTick+0xec>)
 8000b04:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <HAL_InitTick+0xf0>)
 8000b06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <HAL_InitTick+0xec>)
 8000b0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b0e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b10:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <HAL_InitTick+0xec>)
 8000b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b14:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_InitTick+0xec>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_InitTick+0xec>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_InitTick+0xec>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b28:	4817      	ldr	r0, [pc, #92]	; (8000b88 <HAL_InitTick+0xec>)
 8000b2a:	f001 f9fd 	bl	8001f28 <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d11b      	bne.n	8000b74 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b3c:	4812      	ldr	r0, [pc, #72]	; (8000b88 <HAL_InitTick+0xec>)
 8000b3e:	f001 fa4d 	bl	8001fdc <HAL_TIM_Base_Start_IT>
 8000b42:	4603      	mov	r3, r0
 8000b44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d111      	bne.n	8000b74 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b50:	2036      	movs	r0, #54	; 0x36
 8000b52:	f000 f991 	bl	8000e78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d808      	bhi.n	8000b6e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	2036      	movs	r0, #54	; 0x36
 8000b62:	f000 f96d 	bl	8000e40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <HAL_InitTick+0xf4>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	e002      	b.n	8000b74 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3738      	adds	r7, #56	; 0x38
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	431bde83 	.word	0x431bde83
 8000b88:	200000dc 	.word	0x200000dc
 8000b8c:	40001000 	.word	0x40001000
 8000b90:	20000004 	.word	0x20000004

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b98:	e7fe      	b.n	8000b98 <NMI_Handler+0x4>

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <TIM6_DAC_IRQHandler+0x10>)
 8000bc6:	f001 fa79 	bl	80020bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000dc 	.word	0x200000dc

08000bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bfc:	f7ff ffea 	bl	8000bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c00:	480c      	ldr	r0, [pc, #48]	; (8000c34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c02:	490d      	ldr	r1, [pc, #52]	; (8000c38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c18:	4c0a      	ldr	r4, [pc, #40]	; (8000c44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f004 fe47 	bl	80058b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fc6f 	bl	800050c <main>
  bx  lr    
 8000c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c3c:	08005b58 	.word	0x08005b58
  ldr r2, =_sbss
 8000c40:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c44:	20004c50 	.word	0x20004c50

08000c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <HAL_Init+0x40>)
 8000c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_Init+0x40>)
 8000c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_Init+0x40>)
 8000c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f8d8 	bl	8000e2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7a:	200f      	movs	r0, #15
 8000c7c:	f7ff ff0e 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c80:	f7ff fe98 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023c00 	.word	0x40023c00

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000124 	.word	0x20000124

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000124 	.word	0x20000124

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <__NVIC_EnableIRQ+0x38>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	; (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	; 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ff4c 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e52:	f7ff ff61 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	6978      	ldr	r0, [r7, #20]
 8000e5e:	f7ff ffb1 	bl	8000dc4 <NVIC_EncodePriority>
 8000e62:	4602      	mov	r2, r0
 8000e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff80 	bl	8000d70 <__NVIC_SetPriority>
}
 8000e70:	bf00      	nop
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ff54 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	e165      	b.n	800117c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	f040 8154 	bne.w	8001176 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d005      	beq.n	8000ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d130      	bne.n	8000f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	f003 0201 	and.w	r2, r3, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d017      	beq.n	8000f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d123      	bne.n	8000fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	08da      	lsrs	r2, r3, #3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	69b9      	ldr	r1, [r7, #24]
 8000fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0203 	and.w	r2, r3, #3
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80ae 	beq.w	8001176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <HAL_GPIO_Init+0x300>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a5c      	ldr	r2, [pc, #368]	; (8001194 <HAL_GPIO_Init+0x300>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b5a      	ldr	r3, [pc, #360]	; (8001194 <HAL_GPIO_Init+0x300>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001036:	4a58      	ldr	r2, [pc, #352]	; (8001198 <HAL_GPIO_Init+0x304>)
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4f      	ldr	r2, [pc, #316]	; (800119c <HAL_GPIO_Init+0x308>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d025      	beq.n	80010ae <HAL_GPIO_Init+0x21a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4e      	ldr	r2, [pc, #312]	; (80011a0 <HAL_GPIO_Init+0x30c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d01f      	beq.n	80010aa <HAL_GPIO_Init+0x216>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4d      	ldr	r2, [pc, #308]	; (80011a4 <HAL_GPIO_Init+0x310>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d019      	beq.n	80010a6 <HAL_GPIO_Init+0x212>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4c      	ldr	r2, [pc, #304]	; (80011a8 <HAL_GPIO_Init+0x314>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x20e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4b      	ldr	r2, [pc, #300]	; (80011ac <HAL_GPIO_Init+0x318>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x20a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4a      	ldr	r2, [pc, #296]	; (80011b0 <HAL_GPIO_Init+0x31c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x206>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a49      	ldr	r2, [pc, #292]	; (80011b4 <HAL_GPIO_Init+0x320>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x202>
 8001092:	2306      	movs	r3, #6
 8001094:	e00c      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 8001096:	2307      	movs	r3, #7
 8001098:	e00a      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 800109a:	2305      	movs	r3, #5
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 800109e:	2304      	movs	r3, #4
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010ae:	2300      	movs	r3, #0
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	f002 0203 	and.w	r2, r2, #3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c0:	4935      	ldr	r1, [pc, #212]	; (8001198 <HAL_GPIO_Init+0x304>)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ce:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <HAL_GPIO_Init+0x324>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010f2:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <HAL_GPIO_Init+0x324>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <HAL_GPIO_Init+0x324>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800111c:	4a26      	ldr	r2, [pc, #152]	; (80011b8 <HAL_GPIO_Init+0x324>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_GPIO_Init+0x324>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001146:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <HAL_GPIO_Init+0x324>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <HAL_GPIO_Init+0x324>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001170:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <HAL_GPIO_Init+0x324>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3301      	adds	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	f67f ae96 	bls.w	8000eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40013800 	.word	0x40013800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40021400 	.word	0x40021400
 80011b4:	40021800 	.word	0x40021800
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	887b      	ldrh	r3, [r7, #2]
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e001      	b.n	80011de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001208:	e003      	b.n	8001212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	041a      	lsls	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	619a      	str	r2, [r3, #24]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800121e:	b480      	push	{r7}
 8001220:	b085      	sub	sp, #20
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001230:	887a      	ldrh	r2, [r7, #2]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4013      	ands	r3, r2
 8001236:	041a      	lsls	r2, r3, #16
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43d9      	mvns	r1, r3
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	400b      	ands	r3, r1
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a1f      	ldr	r2, [pc, #124]	; (80012e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_PWREx_EnableOverDrive+0x94>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001280:	f7ff fd1a 	bl	8000cb8 <HAL_GetTick>
 8001284:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001286:	e009      	b.n	800129c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001288:	f7ff fd16 	bl	8000cb8 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001296:	d901      	bls.n	800129c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e01f      	b.n	80012dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <HAL_PWREx_EnableOverDrive+0x98>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d1ee      	bne.n	8001288 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b0:	f7ff fd02 	bl	8000cb8 <HAL_GetTick>
 80012b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012b6:	e009      	b.n	80012cc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012b8:	f7ff fcfe 	bl	8000cb8 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012c6:	d901      	bls.n	80012cc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e007      	b.n	80012dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <HAL_PWREx_EnableOverDrive+0x98>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012d8:	d1ee      	bne.n	80012b8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	420e0040 	.word	0x420e0040
 80012ec:	40007000 	.word	0x40007000
 80012f0:	420e0044 	.word	0x420e0044

080012f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e0cc      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001308:	4b68      	ldr	r3, [pc, #416]	; (80014ac <HAL_RCC_ClockConfig+0x1b8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d90c      	bls.n	8001330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001316:	4b65      	ldr	r3, [pc, #404]	; (80014ac <HAL_RCC_ClockConfig+0x1b8>)
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800131e:	4b63      	ldr	r3, [pc, #396]	; (80014ac <HAL_RCC_ClockConfig+0x1b8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	d001      	beq.n	8001330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e0b8      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d020      	beq.n	800137e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001348:	4b59      	ldr	r3, [pc, #356]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	4a58      	ldr	r2, [pc, #352]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 800134e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001360:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	4a52      	ldr	r2, [pc, #328]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800136a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800136c:	4b50      	ldr	r3, [pc, #320]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	494d      	ldr	r1, [pc, #308]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 800137a:	4313      	orrs	r3, r2
 800137c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d044      	beq.n	8001414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d107      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	4b47      	ldr	r3, [pc, #284]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d119      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e07f      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d003      	beq.n	80013b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d107      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b2:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d109      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e06f      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c2:	4b3b      	ldr	r3, [pc, #236]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e067      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013d2:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f023 0203 	bic.w	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	4934      	ldr	r1, [pc, #208]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013e4:	f7ff fc68 	bl	8000cb8 <HAL_GetTick>
 80013e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ea:	e00a      	b.n	8001402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ec:	f7ff fc64 	bl	8000cb8 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e04f      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001402:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 020c 	and.w	r2, r3, #12
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	429a      	cmp	r2, r3
 8001412:	d1eb      	bne.n	80013ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001414:	4b25      	ldr	r3, [pc, #148]	; (80014ac <HAL_RCC_ClockConfig+0x1b8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d20c      	bcs.n	800143c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <HAL_RCC_ClockConfig+0x1b8>)
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <HAL_RCC_ClockConfig+0x1b8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e032      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	d008      	beq.n	800145a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4916      	ldr	r1, [pc, #88]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	4313      	orrs	r3, r2
 8001458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b00      	cmp	r3, #0
 8001464:	d009      	beq.n	800147a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	490e      	ldr	r1, [pc, #56]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	4313      	orrs	r3, r2
 8001478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800147a:	f000 f887 	bl	800158c <HAL_RCC_GetSysClockFreq>
 800147e:	4602      	mov	r2, r0
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	091b      	lsrs	r3, r3, #4
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	490a      	ldr	r1, [pc, #40]	; (80014b4 <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	5ccb      	ldrb	r3, [r1, r3]
 800148e:	fa22 f303 	lsr.w	r3, r2, r3
 8001492:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_RCC_ClockConfig+0x1c8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fafe 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023c00 	.word	0x40023c00
 80014b0:	40023800 	.word	0x40023800
 80014b4:	08005b30 	.word	0x08005b30
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000004 	.word	0x20000004

080014c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000000 	.word	0x20000000

080014d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014dc:	f7ff fff0 	bl	80014c0 <HAL_RCC_GetHCLKFreq>
 80014e0:	4602      	mov	r2, r0
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	0a9b      	lsrs	r3, r3, #10
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	4903      	ldr	r1, [pc, #12]	; (80014fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ee:	5ccb      	ldrb	r3, [r1, r3]
 80014f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40023800 	.word	0x40023800
 80014fc:	08005b40 	.word	0x08005b40

08001500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001504:	f7ff ffdc 	bl	80014c0 <HAL_RCC_GetHCLKFreq>
 8001508:	4602      	mov	r2, r0
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	0b5b      	lsrs	r3, r3, #13
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	4903      	ldr	r1, [pc, #12]	; (8001524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001516:	5ccb      	ldrb	r3, [r1, r3]
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40023800 	.word	0x40023800
 8001524:	08005b40 	.word	0x08005b40

08001528 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	220f      	movs	r2, #15
 8001536:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_RCC_GetClockConfig+0x5c>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0203 	and.w	r2, r3, #3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_RCC_GetClockConfig+0x5c>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_RCC_GetClockConfig+0x5c>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_RCC_GetClockConfig+0x5c>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	08db      	lsrs	r3, r3, #3
 8001562:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <HAL_RCC_GetClockConfig+0x60>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 020f 	and.w	r2, r3, #15
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	601a      	str	r2, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	40023c00 	.word	0x40023c00

0800158c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800158c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001590:	b0ae      	sub	sp, #184	; 0xb8
 8001592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015b2:	4bcb      	ldr	r3, [pc, #812]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b0c      	cmp	r3, #12
 80015bc:	f200 8206 	bhi.w	80019cc <HAL_RCC_GetSysClockFreq+0x440>
 80015c0:	a201      	add	r2, pc, #4	; (adr r2, 80015c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c6:	bf00      	nop
 80015c8:	080015fd 	.word	0x080015fd
 80015cc:	080019cd 	.word	0x080019cd
 80015d0:	080019cd 	.word	0x080019cd
 80015d4:	080019cd 	.word	0x080019cd
 80015d8:	08001605 	.word	0x08001605
 80015dc:	080019cd 	.word	0x080019cd
 80015e0:	080019cd 	.word	0x080019cd
 80015e4:	080019cd 	.word	0x080019cd
 80015e8:	0800160d 	.word	0x0800160d
 80015ec:	080019cd 	.word	0x080019cd
 80015f0:	080019cd 	.word	0x080019cd
 80015f4:	080019cd 	.word	0x080019cd
 80015f8:	080017fd 	.word	0x080017fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015fc:	4bb9      	ldr	r3, [pc, #740]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80015fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001602:	e1e7      	b.n	80019d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001604:	4bb8      	ldr	r3, [pc, #736]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001606:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800160a:	e1e3      	b.n	80019d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800160c:	4bb4      	ldr	r3, [pc, #720]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001614:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001618:	4bb1      	ldr	r3, [pc, #708]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d071      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001624:	4bae      	ldr	r3, [pc, #696]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	099b      	lsrs	r3, r3, #6
 800162a:	2200      	movs	r2, #0
 800162c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001630:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001634:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800163c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001646:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800164a:	4622      	mov	r2, r4
 800164c:	462b      	mov	r3, r5
 800164e:	f04f 0000 	mov.w	r0, #0
 8001652:	f04f 0100 	mov.w	r1, #0
 8001656:	0159      	lsls	r1, r3, #5
 8001658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800165c:	0150      	lsls	r0, r2, #5
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4621      	mov	r1, r4
 8001664:	1a51      	subs	r1, r2, r1
 8001666:	6439      	str	r1, [r7, #64]	; 0x40
 8001668:	4629      	mov	r1, r5
 800166a:	eb63 0301 	sbc.w	r3, r3, r1
 800166e:	647b      	str	r3, [r7, #68]	; 0x44
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800167c:	4649      	mov	r1, r9
 800167e:	018b      	lsls	r3, r1, #6
 8001680:	4641      	mov	r1, r8
 8001682:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001686:	4641      	mov	r1, r8
 8001688:	018a      	lsls	r2, r1, #6
 800168a:	4641      	mov	r1, r8
 800168c:	1a51      	subs	r1, r2, r1
 800168e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001690:	4649      	mov	r1, r9
 8001692:	eb63 0301 	sbc.w	r3, r3, r1
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80016a4:	4649      	mov	r1, r9
 80016a6:	00cb      	lsls	r3, r1, #3
 80016a8:	4641      	mov	r1, r8
 80016aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016ae:	4641      	mov	r1, r8
 80016b0:	00ca      	lsls	r2, r1, #3
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	4603      	mov	r3, r0
 80016b8:	4622      	mov	r2, r4
 80016ba:	189b      	adds	r3, r3, r2
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
 80016be:	462b      	mov	r3, r5
 80016c0:	460a      	mov	r2, r1
 80016c2:	eb42 0303 	adc.w	r3, r2, r3
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80016d4:	4629      	mov	r1, r5
 80016d6:	024b      	lsls	r3, r1, #9
 80016d8:	4621      	mov	r1, r4
 80016da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016de:	4621      	mov	r1, r4
 80016e0:	024a      	lsls	r2, r1, #9
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016ea:	2200      	movs	r2, #0
 80016ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80016f8:	f7fe fd8a 	bl	8000210 <__aeabi_uldivmod>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4613      	mov	r3, r2
 8001702:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001706:	e067      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001708:	4b75      	ldr	r3, [pc, #468]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	2200      	movs	r2, #0
 8001710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001714:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001718:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800171c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001720:	67bb      	str	r3, [r7, #120]	; 0x78
 8001722:	2300      	movs	r3, #0
 8001724:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001726:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800172a:	4622      	mov	r2, r4
 800172c:	462b      	mov	r3, r5
 800172e:	f04f 0000 	mov.w	r0, #0
 8001732:	f04f 0100 	mov.w	r1, #0
 8001736:	0159      	lsls	r1, r3, #5
 8001738:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800173c:	0150      	lsls	r0, r2, #5
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4621      	mov	r1, r4
 8001744:	1a51      	subs	r1, r2, r1
 8001746:	62b9      	str	r1, [r7, #40]	; 0x28
 8001748:	4629      	mov	r1, r5
 800174a:	eb63 0301 	sbc.w	r3, r3, r1
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800175c:	4649      	mov	r1, r9
 800175e:	018b      	lsls	r3, r1, #6
 8001760:	4641      	mov	r1, r8
 8001762:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001766:	4641      	mov	r1, r8
 8001768:	018a      	lsls	r2, r1, #6
 800176a:	4641      	mov	r1, r8
 800176c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001770:	4649      	mov	r1, r9
 8001772:	eb63 0b01 	sbc.w	fp, r3, r1
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001782:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001786:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800178a:	4692      	mov	sl, r2
 800178c:	469b      	mov	fp, r3
 800178e:	4623      	mov	r3, r4
 8001790:	eb1a 0303 	adds.w	r3, sl, r3
 8001794:	623b      	str	r3, [r7, #32]
 8001796:	462b      	mov	r3, r5
 8001798:	eb4b 0303 	adc.w	r3, fp, r3
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017aa:	4629      	mov	r1, r5
 80017ac:	028b      	lsls	r3, r1, #10
 80017ae:	4621      	mov	r1, r4
 80017b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017b4:	4621      	mov	r1, r4
 80017b6:	028a      	lsls	r2, r1, #10
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017c0:	2200      	movs	r2, #0
 80017c2:	673b      	str	r3, [r7, #112]	; 0x70
 80017c4:	677a      	str	r2, [r7, #116]	; 0x74
 80017c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80017ca:	f7fe fd21 	bl	8000210 <__aeabi_uldivmod>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4613      	mov	r3, r2
 80017d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017d8:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	0c1b      	lsrs	r3, r3, #16
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	3301      	adds	r3, #1
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80017ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017fa:	e0eb      	b.n	80019d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017fc:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001808:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d06b      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	2200      	movs	r2, #0
 800181c:	66bb      	str	r3, [r7, #104]	; 0x68
 800181e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001826:	663b      	str	r3, [r7, #96]	; 0x60
 8001828:	2300      	movs	r3, #0
 800182a:	667b      	str	r3, [r7, #100]	; 0x64
 800182c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001830:	4622      	mov	r2, r4
 8001832:	462b      	mov	r3, r5
 8001834:	f04f 0000 	mov.w	r0, #0
 8001838:	f04f 0100 	mov.w	r1, #0
 800183c:	0159      	lsls	r1, r3, #5
 800183e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001842:	0150      	lsls	r0, r2, #5
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4621      	mov	r1, r4
 800184a:	1a51      	subs	r1, r2, r1
 800184c:	61b9      	str	r1, [r7, #24]
 800184e:	4629      	mov	r1, r5
 8001850:	eb63 0301 	sbc.w	r3, r3, r1
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001862:	4659      	mov	r1, fp
 8001864:	018b      	lsls	r3, r1, #6
 8001866:	4651      	mov	r1, sl
 8001868:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800186c:	4651      	mov	r1, sl
 800186e:	018a      	lsls	r2, r1, #6
 8001870:	4651      	mov	r1, sl
 8001872:	ebb2 0801 	subs.w	r8, r2, r1
 8001876:	4659      	mov	r1, fp
 8001878:	eb63 0901 	sbc.w	r9, r3, r1
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001888:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800188c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001890:	4690      	mov	r8, r2
 8001892:	4699      	mov	r9, r3
 8001894:	4623      	mov	r3, r4
 8001896:	eb18 0303 	adds.w	r3, r8, r3
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	462b      	mov	r3, r5
 800189e:	eb49 0303 	adc.w	r3, r9, r3
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018b0:	4629      	mov	r1, r5
 80018b2:	024b      	lsls	r3, r1, #9
 80018b4:	4621      	mov	r1, r4
 80018b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018ba:	4621      	mov	r1, r4
 80018bc:	024a      	lsls	r2, r1, #9
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018c6:	2200      	movs	r2, #0
 80018c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80018ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80018cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018d0:	f7fe fc9e 	bl	8000210 <__aeabi_uldivmod>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4613      	mov	r3, r2
 80018da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018de:	e065      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0x420>
 80018e0:	40023800 	.word	0x40023800
 80018e4:	00f42400 	.word	0x00f42400
 80018e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ec:	4b3d      	ldr	r3, [pc, #244]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	099b      	lsrs	r3, r3, #6
 80018f2:	2200      	movs	r2, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	4611      	mov	r1, r2
 80018f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018fc:	653b      	str	r3, [r7, #80]	; 0x50
 80018fe:	2300      	movs	r3, #0
 8001900:	657b      	str	r3, [r7, #84]	; 0x54
 8001902:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001906:	4642      	mov	r2, r8
 8001908:	464b      	mov	r3, r9
 800190a:	f04f 0000 	mov.w	r0, #0
 800190e:	f04f 0100 	mov.w	r1, #0
 8001912:	0159      	lsls	r1, r3, #5
 8001914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001918:	0150      	lsls	r0, r2, #5
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4641      	mov	r1, r8
 8001920:	1a51      	subs	r1, r2, r1
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	4649      	mov	r1, r9
 8001926:	eb63 0301 	sbc.w	r3, r3, r1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001938:	4659      	mov	r1, fp
 800193a:	018b      	lsls	r3, r1, #6
 800193c:	4651      	mov	r1, sl
 800193e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001942:	4651      	mov	r1, sl
 8001944:	018a      	lsls	r2, r1, #6
 8001946:	4651      	mov	r1, sl
 8001948:	1a54      	subs	r4, r2, r1
 800194a:	4659      	mov	r1, fp
 800194c:	eb63 0501 	sbc.w	r5, r3, r1
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	00eb      	lsls	r3, r5, #3
 800195a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800195e:	00e2      	lsls	r2, r4, #3
 8001960:	4614      	mov	r4, r2
 8001962:	461d      	mov	r5, r3
 8001964:	4643      	mov	r3, r8
 8001966:	18e3      	adds	r3, r4, r3
 8001968:	603b      	str	r3, [r7, #0]
 800196a:	464b      	mov	r3, r9
 800196c:	eb45 0303 	adc.w	r3, r5, r3
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800197e:	4629      	mov	r1, r5
 8001980:	028b      	lsls	r3, r1, #10
 8001982:	4621      	mov	r1, r4
 8001984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001988:	4621      	mov	r1, r4
 800198a:	028a      	lsls	r2, r1, #10
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001994:	2200      	movs	r2, #0
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48
 8001998:	64fa      	str	r2, [r7, #76]	; 0x4c
 800199a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800199e:	f7fe fc37 	bl	8000210 <__aeabi_uldivmod>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4613      	mov	r3, r2
 80019a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019ac:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	0f1b      	lsrs	r3, r3, #28
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80019ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019ca:	e003      	b.n	80019d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80019ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	37b8      	adds	r7, #184	; 0xb8
 80019dc:	46bd      	mov	sp, r7
 80019de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	00f42400 	.word	0x00f42400

080019ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e28d      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 8083 	beq.w	8001b12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a0c:	4b94      	ldr	r3, [pc, #592]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d019      	beq.n	8001a4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a18:	4b91      	ldr	r3, [pc, #580]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a24:	4b8e      	ldr	r3, [pc, #568]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a30:	d00c      	beq.n	8001a4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a32:	4b8b      	ldr	r3, [pc, #556]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	d112      	bne.n	8001a64 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a3e:	4b88      	ldr	r3, [pc, #544]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a4a:	d10b      	bne.n	8001a64 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	4b84      	ldr	r3, [pc, #528]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d05b      	beq.n	8001b10 <HAL_RCC_OscConfig+0x124>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d157      	bne.n	8001b10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e25a      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6c:	d106      	bne.n	8001a7c <HAL_RCC_OscConfig+0x90>
 8001a6e:	4b7c      	ldr	r3, [pc, #496]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a7b      	ldr	r2, [pc, #492]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e01d      	b.n	8001ab8 <HAL_RCC_OscConfig+0xcc>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0xb4>
 8001a86:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a75      	ldr	r2, [pc, #468]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b73      	ldr	r3, [pc, #460]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a72      	ldr	r2, [pc, #456]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_OscConfig+0xcc>
 8001aa0:	4b6f      	ldr	r3, [pc, #444]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a6e      	ldr	r2, [pc, #440]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b6c      	ldr	r3, [pc, #432]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a6b      	ldr	r2, [pc, #428]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d013      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f8fa 	bl	8000cb8 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff f8f6 	bl	8000cb8 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e21f      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b61      	ldr	r3, [pc, #388]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0xdc>
 8001ae6:	e014      	b.n	8001b12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f8e6 	bl	8000cb8 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff f8e2 	bl	8000cb8 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e20b      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b02:	4b57      	ldr	r3, [pc, #348]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x104>
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d06f      	beq.n	8001bfe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b1e:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d017      	beq.n	8001b5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b2a:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d105      	bne.n	8001b42 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b36:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00b      	beq.n	8001b5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b42:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b4a:	2b0c      	cmp	r3, #12
 8001b4c:	d11c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b4e:	4b44      	ldr	r3, [pc, #272]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d116      	bne.n	8001b88 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_RCC_OscConfig+0x186>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e1d3      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b72:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4937      	ldr	r1, [pc, #220]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	e03a      	b.n	8001bfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d020      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b90:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <HAL_RCC_OscConfig+0x278>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7ff f88f 	bl	8000cb8 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9e:	f7ff f88b 	bl	8000cb8 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e1b4      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbc:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4925      	ldr	r1, [pc, #148]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]
 8001bd0:	e015      	b.n	8001bfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <HAL_RCC_OscConfig+0x278>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f86e 	bl	8000cb8 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be0:	f7ff f86a 	bl	8000cb8 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e193      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d036      	beq.n	8001c78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d016      	beq.n	8001c40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c18:	f7ff f84e 	bl	8000cb8 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c20:	f7ff f84a 	bl	8000cb8 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e173      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x234>
 8001c3e:	e01b      	b.n	8001c78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c46:	f7ff f837 	bl	8000cb8 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4c:	e00e      	b.n	8001c6c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4e:	f7ff f833 	bl	8000cb8 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d907      	bls.n	8001c6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e15c      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
 8001c60:	40023800 	.word	0x40023800
 8001c64:	42470000 	.word	0x42470000
 8001c68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6c:	4b8a      	ldr	r3, [pc, #552]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1ea      	bne.n	8001c4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 8097 	beq.w	8001db4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8a:	4b83      	ldr	r3, [pc, #524]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10f      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	4b7f      	ldr	r3, [pc, #508]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a7e      	ldr	r2, [pc, #504]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b7c      	ldr	r3, [pc, #496]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb6:	4b79      	ldr	r3, [pc, #484]	; (8001e9c <HAL_RCC_OscConfig+0x4b0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d118      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc2:	4b76      	ldr	r3, [pc, #472]	; (8001e9c <HAL_RCC_OscConfig+0x4b0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a75      	ldr	r2, [pc, #468]	; (8001e9c <HAL_RCC_OscConfig+0x4b0>)
 8001cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cce:	f7fe fff3 	bl	8000cb8 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd6:	f7fe ffef 	bl	8000cb8 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e118      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce8:	4b6c      	ldr	r3, [pc, #432]	; (8001e9c <HAL_RCC_OscConfig+0x4b0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_OscConfig+0x31e>
 8001cfc:	4b66      	ldr	r3, [pc, #408]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d00:	4a65      	ldr	r2, [pc, #404]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6713      	str	r3, [r2, #112]	; 0x70
 8001d08:	e01c      	b.n	8001d44 <HAL_RCC_OscConfig+0x358>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x340>
 8001d12:	4b61      	ldr	r3, [pc, #388]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d16:	4a60      	ldr	r2, [pc, #384]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1e:	4b5e      	ldr	r3, [pc, #376]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d22:	4a5d      	ldr	r2, [pc, #372]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2a:	e00b      	b.n	8001d44 <HAL_RCC_OscConfig+0x358>
 8001d2c:	4b5a      	ldr	r3, [pc, #360]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	4a59      	ldr	r2, [pc, #356]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	6713      	str	r3, [r2, #112]	; 0x70
 8001d38:	4b57      	ldr	r3, [pc, #348]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	4a56      	ldr	r2, [pc, #344]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001d3e:	f023 0304 	bic.w	r3, r3, #4
 8001d42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d015      	beq.n	8001d78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4c:	f7fe ffb4 	bl	8000cb8 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d54:	f7fe ffb0 	bl	8000cb8 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e0d7      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6a:	4b4b      	ldr	r3, [pc, #300]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0ee      	beq.n	8001d54 <HAL_RCC_OscConfig+0x368>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d78:	f7fe ff9e 	bl	8000cb8 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7e:	e00a      	b.n	8001d96 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d80:	f7fe ff9a 	bl	8000cb8 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e0c1      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d96:	4b40      	ldr	r3, [pc, #256]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1ee      	bne.n	8001d80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d105      	bne.n	8001db4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da8:	4b3b      	ldr	r3, [pc, #236]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	4a3a      	ldr	r2, [pc, #232]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80ad 	beq.w	8001f18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dbe:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d060      	beq.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d145      	bne.n	8001e5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd2:	4b33      	ldr	r3, [pc, #204]	; (8001ea0 <HAL_RCC_OscConfig+0x4b4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7fe ff6e 	bl	8000cb8 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de0:	f7fe ff6a 	bl	8000cb8 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e093      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df2:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	019b      	lsls	r3, r3, #6
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	085b      	lsrs	r3, r3, #1
 8001e16:	3b01      	subs	r3, #1
 8001e18:	041b      	lsls	r3, r3, #16
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	071b      	lsls	r3, r3, #28
 8001e2a:	491b      	ldr	r1, [pc, #108]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_RCC_OscConfig+0x4b4>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7fe ff3f 	bl	8000cb8 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7fe ff3b 	bl	8000cb8 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e064      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x452>
 8001e5c:	e05c      	b.n	8001f18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_RCC_OscConfig+0x4b4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7fe ff28 	bl	8000cb8 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7fe ff24 	bl	8000cb8 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e04d      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x480>
 8001e8a:	e045      	b.n	8001f18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e040      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <HAL_RCC_OscConfig+0x538>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d030      	beq.n	8001f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d129      	bne.n	8001f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d122      	bne.n	8001f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d119      	bne.n	8001f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	085b      	lsrs	r3, r3, #1
 8001eec:	3b01      	subs	r3, #1
 8001eee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d10f      	bne.n	8001f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800

08001f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e041      	b.n	8001fbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d106      	bne.n	8001f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f839 	bl	8001fc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3304      	adds	r3, #4
 8001f64:	4619      	mov	r1, r3
 8001f66:	4610      	mov	r0, r2
 8001f68:	f000 f9c0 	bl	80022ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d001      	beq.n	8001ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e04e      	b.n	8002092 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a23      	ldr	r2, [pc, #140]	; (80020a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d022      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x80>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201e:	d01d      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x80>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d018      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x80>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d013      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x80>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1c      	ldr	r2, [pc, #112]	; (80020ac <HAL_TIM_Base_Start_IT+0xd0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00e      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x80>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d009      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x80>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d004      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x80>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d111      	bne.n	8002080 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b06      	cmp	r3, #6
 800206c:	d010      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207e:	e007      	b.n	8002090 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40000400 	.word	0x40000400
 80020a8:	40000800 	.word	0x40000800
 80020ac:	40000c00 	.word	0x40000c00
 80020b0:	40010400 	.word	0x40010400
 80020b4:	40014000 	.word	0x40014000
 80020b8:	40001800 	.word	0x40001800

080020bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d020      	beq.n	8002120 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01b      	beq.n	8002120 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0202 	mvn.w	r2, #2
 80020f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f8d2 	bl	80022b0 <HAL_TIM_IC_CaptureCallback>
 800210c:	e005      	b.n	800211a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8c4 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f8d5 	bl	80022c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b00      	cmp	r3, #0
 8002128:	d020      	beq.n	800216c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01b      	beq.n	800216c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0204 	mvn.w	r2, #4
 800213c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2202      	movs	r2, #2
 8002142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f8ac 	bl	80022b0 <HAL_TIM_IC_CaptureCallback>
 8002158:	e005      	b.n	8002166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f89e 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f8af 	bl	80022c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d020      	beq.n	80021b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d01b      	beq.n	80021b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0208 	mvn.w	r2, #8
 8002188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2204      	movs	r2, #4
 800218e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f886 	bl	80022b0 <HAL_TIM_IC_CaptureCallback>
 80021a4:	e005      	b.n	80021b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f878 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f889 	bl	80022c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d020      	beq.n	8002204 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01b      	beq.n	8002204 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f06f 0210 	mvn.w	r2, #16
 80021d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2208      	movs	r2, #8
 80021da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f860 	bl	80022b0 <HAL_TIM_IC_CaptureCallback>
 80021f0:	e005      	b.n	80021fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f852 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f863 	bl	80022c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00c      	beq.n	8002228 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0201 	mvn.w	r2, #1
 8002220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe fbae 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00c      	beq.n	800224c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f906 	bl	8002458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00c      	beq.n	8002270 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f834 	bl	80022d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00c      	beq.n	8002294 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d007      	beq.n	8002294 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0220 	mvn.w	r2, #32
 800228c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f8d8 	bl	8002444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a46      	ldr	r2, [pc, #280]	; (8002418 <TIM_Base_SetConfig+0x12c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d013      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230a:	d00f      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a43      	ldr	r2, [pc, #268]	; (800241c <TIM_Base_SetConfig+0x130>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00b      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a42      	ldr	r2, [pc, #264]	; (8002420 <TIM_Base_SetConfig+0x134>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d007      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a41      	ldr	r2, [pc, #260]	; (8002424 <TIM_Base_SetConfig+0x138>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d003      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a40      	ldr	r2, [pc, #256]	; (8002428 <TIM_Base_SetConfig+0x13c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d108      	bne.n	800233e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a35      	ldr	r2, [pc, #212]	; (8002418 <TIM_Base_SetConfig+0x12c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d02b      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234c:	d027      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a32      	ldr	r2, [pc, #200]	; (800241c <TIM_Base_SetConfig+0x130>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d023      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a31      	ldr	r2, [pc, #196]	; (8002420 <TIM_Base_SetConfig+0x134>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d01f      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a30      	ldr	r2, [pc, #192]	; (8002424 <TIM_Base_SetConfig+0x138>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01b      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <TIM_Base_SetConfig+0x13c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d017      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a2e      	ldr	r2, [pc, #184]	; (800242c <TIM_Base_SetConfig+0x140>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a2d      	ldr	r2, [pc, #180]	; (8002430 <TIM_Base_SetConfig+0x144>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00f      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a2c      	ldr	r2, [pc, #176]	; (8002434 <TIM_Base_SetConfig+0x148>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d00b      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a2b      	ldr	r2, [pc, #172]	; (8002438 <TIM_Base_SetConfig+0x14c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d007      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a2a      	ldr	r2, [pc, #168]	; (800243c <TIM_Base_SetConfig+0x150>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d003      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a29      	ldr	r2, [pc, #164]	; (8002440 <TIM_Base_SetConfig+0x154>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d108      	bne.n	80023b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a10      	ldr	r2, [pc, #64]	; (8002418 <TIM_Base_SetConfig+0x12c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d003      	beq.n	80023e4 <TIM_Base_SetConfig+0xf8>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a12      	ldr	r2, [pc, #72]	; (8002428 <TIM_Base_SetConfig+0x13c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d103      	bne.n	80023ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d105      	bne.n	800240a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f023 0201 	bic.w	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	611a      	str	r2, [r3, #16]
  }
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40010000 	.word	0x40010000
 800241c:	40000400 	.word	0x40000400
 8002420:	40000800 	.word	0x40000800
 8002424:	40000c00 	.word	0x40000c00
 8002428:	40010400 	.word	0x40010400
 800242c:	40014000 	.word	0x40014000
 8002430:	40014400 	.word	0x40014400
 8002434:	40014800 	.word	0x40014800
 8002438:	40001800 	.word	0x40001800
 800243c:	40001c00 	.word	0x40001c00
 8002440:	40002000 	.word	0x40002000

08002444 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e042      	b.n	8002504 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7fe faba 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2224      	movs	r2, #36	; 0x24
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f973 	bl	800279c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	; 0x28
 8002510:	af02      	add	r7, sp, #8
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	4613      	mov	r3, r2
 800251a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b20      	cmp	r3, #32
 800252a:	d175      	bne.n	8002618 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_UART_Transmit+0x2c>
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e06e      	b.n	800261a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2221      	movs	r2, #33	; 0x21
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800254a:	f7fe fbb5 	bl	8000cb8 <HAL_GetTick>
 800254e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	88fa      	ldrh	r2, [r7, #6]
 8002554:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	88fa      	ldrh	r2, [r7, #6]
 800255a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002564:	d108      	bne.n	8002578 <HAL_UART_Transmit+0x6c>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d104      	bne.n	8002578 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	e003      	b.n	8002580 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002580:	e02e      	b.n	80025e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2200      	movs	r2, #0
 800258a:	2180      	movs	r1, #128	; 0x80
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f848 	bl	8002622 <UART_WaitOnFlagUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e03a      	b.n	800261a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10b      	bne.n	80025c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	3302      	adds	r3, #2
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	e007      	b.n	80025d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	781a      	ldrb	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	3301      	adds	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1cb      	bne.n	8002582 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2200      	movs	r2, #0
 80025f2:	2140      	movs	r1, #64	; 0x40
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f814 	bl	8002622 <UART_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e006      	b.n	800261a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	e000      	b.n	800261a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002618:	2302      	movs	r3, #2
  }
}
 800261a:	4618      	mov	r0, r3
 800261c:	3720      	adds	r7, #32
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	603b      	str	r3, [r7, #0]
 800262e:	4613      	mov	r3, r2
 8002630:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002632:	e03b      	b.n	80026ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263a:	d037      	beq.n	80026ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800263c:	f7fe fb3c 	bl	8000cb8 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	6a3a      	ldr	r2, [r7, #32]
 8002648:	429a      	cmp	r2, r3
 800264a:	d302      	bcc.n	8002652 <UART_WaitOnFlagUntilTimeout+0x30>
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e03a      	b.n	80026cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d023      	beq.n	80026ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2b80      	cmp	r3, #128	; 0x80
 8002668:	d020      	beq.n	80026ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d01d      	beq.n	80026ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b08      	cmp	r3, #8
 800267c:	d116      	bne.n	80026ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f81d 	bl	80026d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2208      	movs	r2, #8
 800269e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e00f      	b.n	80026cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	4013      	ands	r3, r2
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	bf0c      	ite	eq
 80026bc:	2301      	moveq	r3, #1
 80026be:	2300      	movne	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d0b4      	beq.n	8002634 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b095      	sub	sp, #84	; 0x54
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e6:	e853 3f00 	ldrex	r3, [r3]
 80026ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	330c      	adds	r3, #12
 80026fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026fc:	643a      	str	r2, [r7, #64]	; 0x40
 80026fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002700:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002702:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002704:	e841 2300 	strex	r3, r2, [r1]
 8002708:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e5      	bne.n	80026dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3314      	adds	r3, #20
 8002716:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	e853 3f00 	ldrex	r3, [r3]
 800271e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	64bb      	str	r3, [r7, #72]	; 0x48
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3314      	adds	r3, #20
 800272e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002730:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002738:	e841 2300 	strex	r3, r2, [r1]
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e5      	bne.n	8002710 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	2b01      	cmp	r3, #1
 800274a:	d119      	bne.n	8002780 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	e853 3f00 	ldrex	r3, [r3]
 800275a:	60bb      	str	r3, [r7, #8]
   return(result);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f023 0310 	bic.w	r3, r3, #16
 8002762:	647b      	str	r3, [r7, #68]	; 0x44
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	330c      	adds	r3, #12
 800276a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800276c:	61ba      	str	r2, [r7, #24]
 800276e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002770:	6979      	ldr	r1, [r7, #20]
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	e841 2300 	strex	r3, r2, [r1]
 8002778:	613b      	str	r3, [r7, #16]
   return(result);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1e5      	bne.n	800274c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800278e:	bf00      	nop
 8002790:	3754      	adds	r7, #84	; 0x54
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800279c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a0:	b0c0      	sub	sp, #256	; 0x100
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b8:	68d9      	ldr	r1, [r3, #12]
 80027ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	ea40 0301 	orr.w	r3, r0, r1
 80027c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	431a      	orrs	r2, r3
 80027dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027f4:	f021 010c 	bic.w	r1, r1, #12
 80027f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002802:	430b      	orrs	r3, r1
 8002804:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002816:	6999      	ldr	r1, [r3, #24]
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	ea40 0301 	orr.w	r3, r0, r1
 8002822:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4b8f      	ldr	r3, [pc, #572]	; (8002a68 <UART_SetConfig+0x2cc>)
 800282c:	429a      	cmp	r2, r3
 800282e:	d005      	beq.n	800283c <UART_SetConfig+0xa0>
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	4b8d      	ldr	r3, [pc, #564]	; (8002a6c <UART_SetConfig+0x2d0>)
 8002838:	429a      	cmp	r2, r3
 800283a:	d104      	bne.n	8002846 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800283c:	f7fe fe60 	bl	8001500 <HAL_RCC_GetPCLK2Freq>
 8002840:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002844:	e003      	b.n	800284e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002846:	f7fe fe47 	bl	80014d8 <HAL_RCC_GetPCLK1Freq>
 800284a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800284e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002858:	f040 810c 	bne.w	8002a74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800285c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002860:	2200      	movs	r2, #0
 8002862:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002866:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800286a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800286e:	4622      	mov	r2, r4
 8002870:	462b      	mov	r3, r5
 8002872:	1891      	adds	r1, r2, r2
 8002874:	65b9      	str	r1, [r7, #88]	; 0x58
 8002876:	415b      	adcs	r3, r3
 8002878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800287a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800287e:	4621      	mov	r1, r4
 8002880:	eb12 0801 	adds.w	r8, r2, r1
 8002884:	4629      	mov	r1, r5
 8002886:	eb43 0901 	adc.w	r9, r3, r1
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800289a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800289e:	4690      	mov	r8, r2
 80028a0:	4699      	mov	r9, r3
 80028a2:	4623      	mov	r3, r4
 80028a4:	eb18 0303 	adds.w	r3, r8, r3
 80028a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028ac:	462b      	mov	r3, r5
 80028ae:	eb49 0303 	adc.w	r3, r9, r3
 80028b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80028ca:	460b      	mov	r3, r1
 80028cc:	18db      	adds	r3, r3, r3
 80028ce:	653b      	str	r3, [r7, #80]	; 0x50
 80028d0:	4613      	mov	r3, r2
 80028d2:	eb42 0303 	adc.w	r3, r2, r3
 80028d6:	657b      	str	r3, [r7, #84]	; 0x54
 80028d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80028e0:	f7fd fc96 	bl	8000210 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4b61      	ldr	r3, [pc, #388]	; (8002a70 <UART_SetConfig+0x2d4>)
 80028ea:	fba3 2302 	umull	r2, r3, r3, r2
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	011c      	lsls	r4, r3, #4
 80028f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002900:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002904:	4642      	mov	r2, r8
 8002906:	464b      	mov	r3, r9
 8002908:	1891      	adds	r1, r2, r2
 800290a:	64b9      	str	r1, [r7, #72]	; 0x48
 800290c:	415b      	adcs	r3, r3
 800290e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002910:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002914:	4641      	mov	r1, r8
 8002916:	eb12 0a01 	adds.w	sl, r2, r1
 800291a:	4649      	mov	r1, r9
 800291c:	eb43 0b01 	adc.w	fp, r3, r1
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800292c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002934:	4692      	mov	sl, r2
 8002936:	469b      	mov	fp, r3
 8002938:	4643      	mov	r3, r8
 800293a:	eb1a 0303 	adds.w	r3, sl, r3
 800293e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002942:	464b      	mov	r3, r9
 8002944:	eb4b 0303 	adc.w	r3, fp, r3
 8002948:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800294c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002958:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800295c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002960:	460b      	mov	r3, r1
 8002962:	18db      	adds	r3, r3, r3
 8002964:	643b      	str	r3, [r7, #64]	; 0x40
 8002966:	4613      	mov	r3, r2
 8002968:	eb42 0303 	adc.w	r3, r2, r3
 800296c:	647b      	str	r3, [r7, #68]	; 0x44
 800296e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002972:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002976:	f7fd fc4b 	bl	8000210 <__aeabi_uldivmod>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4611      	mov	r1, r2
 8002980:	4b3b      	ldr	r3, [pc, #236]	; (8002a70 <UART_SetConfig+0x2d4>)
 8002982:	fba3 2301 	umull	r2, r3, r3, r1
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2264      	movs	r2, #100	; 0x64
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	1acb      	subs	r3, r1, r3
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002996:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <UART_SetConfig+0x2d4>)
 8002998:	fba3 2302 	umull	r2, r3, r3, r2
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029a4:	441c      	add	r4, r3
 80029a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029aa:	2200      	movs	r2, #0
 80029ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80029b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80029b8:	4642      	mov	r2, r8
 80029ba:	464b      	mov	r3, r9
 80029bc:	1891      	adds	r1, r2, r2
 80029be:	63b9      	str	r1, [r7, #56]	; 0x38
 80029c0:	415b      	adcs	r3, r3
 80029c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029c8:	4641      	mov	r1, r8
 80029ca:	1851      	adds	r1, r2, r1
 80029cc:	6339      	str	r1, [r7, #48]	; 0x30
 80029ce:	4649      	mov	r1, r9
 80029d0:	414b      	adcs	r3, r1
 80029d2:	637b      	str	r3, [r7, #52]	; 0x34
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80029e0:	4659      	mov	r1, fp
 80029e2:	00cb      	lsls	r3, r1, #3
 80029e4:	4651      	mov	r1, sl
 80029e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ea:	4651      	mov	r1, sl
 80029ec:	00ca      	lsls	r2, r1, #3
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	4642      	mov	r2, r8
 80029f6:	189b      	adds	r3, r3, r2
 80029f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029fc:	464b      	mov	r3, r9
 80029fe:	460a      	mov	r2, r1
 8002a00:	eb42 0303 	adc.w	r3, r2, r3
 8002a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	18db      	adds	r3, r3, r3
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a22:	4613      	mov	r3, r2
 8002a24:	eb42 0303 	adc.w	r3, r2, r3
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a32:	f7fd fbed 	bl	8000210 <__aeabi_uldivmod>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <UART_SetConfig+0x2d4>)
 8002a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	2164      	movs	r1, #100	; 0x64
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	3332      	adds	r3, #50	; 0x32
 8002a4e:	4a08      	ldr	r2, [pc, #32]	; (8002a70 <UART_SetConfig+0x2d4>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	f003 0207 	and.w	r2, r3, #7
 8002a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4422      	add	r2, r4
 8002a62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a64:	e106      	b.n	8002c74 <UART_SetConfig+0x4d8>
 8002a66:	bf00      	nop
 8002a68:	40011000 	.word	0x40011000
 8002a6c:	40011400 	.word	0x40011400
 8002a70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a86:	4642      	mov	r2, r8
 8002a88:	464b      	mov	r3, r9
 8002a8a:	1891      	adds	r1, r2, r2
 8002a8c:	6239      	str	r1, [r7, #32]
 8002a8e:	415b      	adcs	r3, r3
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
 8002a92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a96:	4641      	mov	r1, r8
 8002a98:	1854      	adds	r4, r2, r1
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	eb43 0501 	adc.w	r5, r3, r1
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	00eb      	lsls	r3, r5, #3
 8002aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aae:	00e2      	lsls	r2, r4, #3
 8002ab0:	4614      	mov	r4, r2
 8002ab2:	461d      	mov	r5, r3
 8002ab4:	4643      	mov	r3, r8
 8002ab6:	18e3      	adds	r3, r4, r3
 8002ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002abc:	464b      	mov	r3, r9
 8002abe:	eb45 0303 	adc.w	r3, r5, r3
 8002ac2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ad2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	008b      	lsls	r3, r1, #2
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aec:	4621      	mov	r1, r4
 8002aee:	008a      	lsls	r2, r1, #2
 8002af0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002af4:	f7fd fb8c 	bl	8000210 <__aeabi_uldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4b60      	ldr	r3, [pc, #384]	; (8002c80 <UART_SetConfig+0x4e4>)
 8002afe:	fba3 2302 	umull	r2, r3, r3, r2
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	011c      	lsls	r4, r3, #4
 8002b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b18:	4642      	mov	r2, r8
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	1891      	adds	r1, r2, r2
 8002b1e:	61b9      	str	r1, [r7, #24]
 8002b20:	415b      	adcs	r3, r3
 8002b22:	61fb      	str	r3, [r7, #28]
 8002b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b28:	4641      	mov	r1, r8
 8002b2a:	1851      	adds	r1, r2, r1
 8002b2c:	6139      	str	r1, [r7, #16]
 8002b2e:	4649      	mov	r1, r9
 8002b30:	414b      	adcs	r3, r1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b40:	4659      	mov	r1, fp
 8002b42:	00cb      	lsls	r3, r1, #3
 8002b44:	4651      	mov	r1, sl
 8002b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b4a:	4651      	mov	r1, sl
 8002b4c:	00ca      	lsls	r2, r1, #3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	4603      	mov	r3, r0
 8002b54:	4642      	mov	r2, r8
 8002b56:	189b      	adds	r3, r3, r2
 8002b58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b5c:	464b      	mov	r3, r9
 8002b5e:	460a      	mov	r2, r1
 8002b60:	eb42 0303 	adc.w	r3, r2, r3
 8002b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b80:	4649      	mov	r1, r9
 8002b82:	008b      	lsls	r3, r1, #2
 8002b84:	4641      	mov	r1, r8
 8002b86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b8a:	4641      	mov	r1, r8
 8002b8c:	008a      	lsls	r2, r1, #2
 8002b8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b92:	f7fd fb3d 	bl	8000210 <__aeabi_uldivmod>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4b38      	ldr	r3, [pc, #224]	; (8002c80 <UART_SetConfig+0x4e4>)
 8002b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2264      	movs	r2, #100	; 0x64
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	1acb      	subs	r3, r1, r3
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	3332      	adds	r3, #50	; 0x32
 8002bb0:	4a33      	ldr	r2, [pc, #204]	; (8002c80 <UART_SetConfig+0x4e4>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bbc:	441c      	add	r4, r3
 8002bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	673b      	str	r3, [r7, #112]	; 0x70
 8002bc6:	677a      	str	r2, [r7, #116]	; 0x74
 8002bc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002bcc:	4642      	mov	r2, r8
 8002bce:	464b      	mov	r3, r9
 8002bd0:	1891      	adds	r1, r2, r2
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	415b      	adcs	r3, r3
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bdc:	4641      	mov	r1, r8
 8002bde:	1851      	adds	r1, r2, r1
 8002be0:	6039      	str	r1, [r7, #0]
 8002be2:	4649      	mov	r1, r9
 8002be4:	414b      	adcs	r3, r1
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bf4:	4659      	mov	r1, fp
 8002bf6:	00cb      	lsls	r3, r1, #3
 8002bf8:	4651      	mov	r1, sl
 8002bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bfe:	4651      	mov	r1, sl
 8002c00:	00ca      	lsls	r2, r1, #3
 8002c02:	4610      	mov	r0, r2
 8002c04:	4619      	mov	r1, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	4642      	mov	r2, r8
 8002c0a:	189b      	adds	r3, r3, r2
 8002c0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c0e:	464b      	mov	r3, r9
 8002c10:	460a      	mov	r2, r1
 8002c12:	eb42 0303 	adc.w	r3, r2, r3
 8002c16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	663b      	str	r3, [r7, #96]	; 0x60
 8002c22:	667a      	str	r2, [r7, #100]	; 0x64
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c30:	4649      	mov	r1, r9
 8002c32:	008b      	lsls	r3, r1, #2
 8002c34:	4641      	mov	r1, r8
 8002c36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c3a:	4641      	mov	r1, r8
 8002c3c:	008a      	lsls	r2, r1, #2
 8002c3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c42:	f7fd fae5 	bl	8000210 <__aeabi_uldivmod>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <UART_SetConfig+0x4e4>)
 8002c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	2164      	movs	r1, #100	; 0x64
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	3332      	adds	r3, #50	; 0x32
 8002c5e:	4a08      	ldr	r2, [pc, #32]	; (8002c80 <UART_SetConfig+0x4e4>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	f003 020f 	and.w	r2, r3, #15
 8002c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4422      	add	r2, r4
 8002c72:	609a      	str	r2, [r3, #8]
}
 8002c74:	bf00      	nop
 8002c76:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c80:	51eb851f 	.word	0x51eb851f

08002c84 <__NVIC_SetPriority>:
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	6039      	str	r1, [r7, #0]
 8002c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	db0a      	blt.n	8002cae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	490c      	ldr	r1, [pc, #48]	; (8002cd0 <__NVIC_SetPriority+0x4c>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	0112      	lsls	r2, r2, #4
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002cac:	e00a      	b.n	8002cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4908      	ldr	r1, [pc, #32]	; (8002cd4 <__NVIC_SetPriority+0x50>)
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	3b04      	subs	r3, #4
 8002cbc:	0112      	lsls	r2, r2, #4
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	761a      	strb	r2, [r3, #24]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000e100 	.word	0xe000e100
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <SysTick_Handler+0x1c>)
 8002cde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002ce0:	f001 fd28 	bl	8004734 <xTaskGetSchedulerState>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d001      	beq.n	8002cee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002cea:	f002 fb0d 	bl	8005308 <xPortSysTickHandler>
  }
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	e000e010 	.word	0xe000e010

08002cf8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	f06f 0004 	mvn.w	r0, #4
 8002d02:	f7ff ffbf 	bl	8002c84 <__NVIC_SetPriority>
#endif
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d12:	f3ef 8305 	mrs	r3, IPSR
 8002d16:	603b      	str	r3, [r7, #0]
  return(result);
 8002d18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002d1e:	f06f 0305 	mvn.w	r3, #5
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	e00c      	b.n	8002d40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <osKernelInitialize+0x44>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d105      	bne.n	8002d3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <osKernelInitialize+0x44>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	607b      	str	r3, [r7, #4]
 8002d38:	e002      	b.n	8002d40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002d40:	687b      	ldr	r3, [r7, #4]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000128 	.word	0x20000128

08002d54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d5a:	f3ef 8305 	mrs	r3, IPSR
 8002d5e:	603b      	str	r3, [r7, #0]
  return(result);
 8002d60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002d66:	f06f 0305 	mvn.w	r3, #5
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	e010      	b.n	8002d90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <osKernelStart+0x48>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d109      	bne.n	8002d8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002d76:	f7ff ffbf 	bl	8002cf8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <osKernelStart+0x48>)
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002d80:	f001 f87c 	bl	8003e7c <vTaskStartScheduler>
      stat = osOK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	607b      	str	r3, [r7, #4]
 8002d88:	e002      	b.n	8002d90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002d90:	687b      	ldr	r3, [r7, #4]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000128 	.word	0x20000128

08002da0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08e      	sub	sp, #56	; 0x38
 8002da4:	af04      	add	r7, sp, #16
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002db0:	f3ef 8305 	mrs	r3, IPSR
 8002db4:	617b      	str	r3, [r7, #20]
  return(result);
 8002db6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d17e      	bne.n	8002eba <osThreadNew+0x11a>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d07b      	beq.n	8002eba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002dc6:	2318      	movs	r3, #24
 8002dc8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d045      	beq.n	8002e66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <osThreadNew+0x48>
        name = attr->name;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <osThreadNew+0x6e>
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b38      	cmp	r3, #56	; 0x38
 8002e00:	d805      	bhi.n	8002e0e <osThreadNew+0x6e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <osThreadNew+0x72>
        return (NULL);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e054      	b.n	8002ebc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	089b      	lsrs	r3, r3, #2
 8002e20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00e      	beq.n	8002e48 <osThreadNew+0xa8>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2ba7      	cmp	r3, #167	; 0xa7
 8002e30:	d90a      	bls.n	8002e48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <osThreadNew+0xa8>
        mem = 1;
 8002e42:	2301      	movs	r3, #1
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	e010      	b.n	8002e6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10c      	bne.n	8002e6a <osThreadNew+0xca>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d108      	bne.n	8002e6a <osThreadNew+0xca>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d104      	bne.n	8002e6a <osThreadNew+0xca>
          mem = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	e001      	b.n	8002e6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d110      	bne.n	8002e92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e78:	9202      	str	r2, [sp, #8]
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	6a3a      	ldr	r2, [r7, #32]
 8002e84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fe0c 	bl	8003aa4 <xTaskCreateStatic>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	e013      	b.n	8002eba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d110      	bne.n	8002eba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	f107 0310 	add.w	r3, r7, #16
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fe57 	bl	8003b5e <xTaskCreate>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d001      	beq.n	8002eba <osThreadNew+0x11a>
            hTask = NULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002eba:	693b      	ldr	r3, [r7, #16]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3728      	adds	r7, #40	; 0x28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ecc:	f3ef 8305 	mrs	r3, IPSR
 8002ed0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ed2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <osDelay+0x1c>
    stat = osErrorISR;
 8002ed8:	f06f 0305 	mvn.w	r3, #5
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	e007      	b.n	8002ef0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 ff92 	bl	8003e14 <vTaskDelay>
    }
  }

  return (stat);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4a07      	ldr	r2, [pc, #28]	; (8002f28 <vApplicationGetIdleTaskMemory+0x2c>)
 8002f0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4a06      	ldr	r2, [pc, #24]	; (8002f2c <vApplicationGetIdleTaskMemory+0x30>)
 8002f12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2280      	movs	r2, #128	; 0x80
 8002f18:	601a      	str	r2, [r3, #0]
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	2000012c 	.word	0x2000012c
 8002f2c:	200001d4 	.word	0x200001d4

08002f30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <vApplicationGetTimerTaskMemory+0x2c>)
 8002f40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	4a06      	ldr	r2, [pc, #24]	; (8002f60 <vApplicationGetTimerTaskMemory+0x30>)
 8002f46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f4e:	601a      	str	r2, [r3, #0]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	200003d4 	.word	0x200003d4
 8002f60:	2000047c 	.word	0x2000047c

08002f64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f103 0208 	add.w	r2, r3, #8
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f103 0208 	add.w	r2, r3, #8
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f103 0208 	add.w	r2, r3, #8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	601a      	str	r2, [r3, #0]
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003006:	b480      	push	{r7}
 8003008:	b085      	sub	sp, #20
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d103      	bne.n	8003026 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e00c      	b.n	8003040 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3308      	adds	r3, #8
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e002      	b.n	8003034 <vListInsert+0x2e>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	429a      	cmp	r2, r3
 800303e:	d2f6      	bcs.n	800302e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	601a      	str	r2, [r3, #0]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6892      	ldr	r2, [r2, #8]
 800308e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6852      	ldr	r2, [r2, #4]
 8003098:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d103      	bne.n	80030ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	1e5a      	subs	r2, r3, #1
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80030f2:	bf00      	nop
 80030f4:	e7fe      	b.n	80030f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80030f6:	f002 f875 	bl	80051e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	68f9      	ldr	r1, [r7, #12]
 8003104:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	441a      	add	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003126:	3b01      	subs	r3, #1
 8003128:	68f9      	ldr	r1, [r7, #12]
 800312a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	441a      	add	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	22ff      	movs	r2, #255	; 0xff
 800313a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	22ff      	movs	r2, #255	; 0xff
 8003142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d114      	bne.n	8003176 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01a      	beq.n	800318a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	3310      	adds	r3, #16
 8003158:	4618      	mov	r0, r3
 800315a:	f001 f929 	bl	80043b0 <xTaskRemoveFromEventList>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d012      	beq.n	800318a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003164:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <xQueueGenericReset+0xcc>)
 8003166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	e009      	b.n	800318a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	3310      	adds	r3, #16
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fef2 	bl	8002f64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3324      	adds	r3, #36	; 0x24
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff feed 	bl	8002f64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800318a:	f002 f85b 	bl	8005244 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800318e:	2301      	movs	r3, #1
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	e000ed04 	.word	0xe000ed04

0800319c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08e      	sub	sp, #56	; 0x38
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80031b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031c2:	bf00      	nop
 80031c4:	e7fe      	b.n	80031c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10a      	bne.n	80031e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80031cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031de:	bf00      	nop
 80031e0:	e7fe      	b.n	80031e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <xQueueGenericCreateStatic+0x52>
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <xQueueGenericCreateStatic+0x56>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <xQueueGenericCreateStatic+0x58>
 80031f2:	2300      	movs	r3, #0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10a      	bne.n	800320e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80031f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	623b      	str	r3, [r7, #32]
}
 800320a:	bf00      	nop
 800320c:	e7fe      	b.n	800320c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d102      	bne.n	800321a <xQueueGenericCreateStatic+0x7e>
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <xQueueGenericCreateStatic+0x82>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <xQueueGenericCreateStatic+0x84>
 800321e:	2300      	movs	r3, #0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10a      	bne.n	800323a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	61fb      	str	r3, [r7, #28]
}
 8003236:	bf00      	nop
 8003238:	e7fe      	b.n	8003238 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800323a:	2350      	movs	r3, #80	; 0x50
 800323c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b50      	cmp	r3, #80	; 0x50
 8003242:	d00a      	beq.n	800325a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	61bb      	str	r3, [r7, #24]
}
 8003256:	bf00      	nop
 8003258:	e7fe      	b.n	8003258 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800325a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00d      	beq.n	8003282 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800326e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f805 	bl	800328c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003284:	4618      	mov	r0, r3
 8003286:	3730      	adds	r7, #48	; 0x30
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d103      	bne.n	80032a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e002      	b.n	80032ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032ba:	2101      	movs	r1, #1
 80032bc:	69b8      	ldr	r0, [r7, #24]
 80032be:	f7ff ff05 	bl	80030cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08e      	sub	sp, #56	; 0x38
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80032e2:	2300      	movs	r3, #0
 80032e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10a      	bne.n	8003306 <xQueueGenericSend+0x32>
	__asm volatile
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003302:	bf00      	nop
 8003304:	e7fe      	b.n	8003304 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d103      	bne.n	8003314 <xQueueGenericSend+0x40>
 800330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <xQueueGenericSend+0x44>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <xQueueGenericSend+0x46>
 8003318:	2300      	movs	r3, #0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10a      	bne.n	8003334 <xQueueGenericSend+0x60>
	__asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003330:	bf00      	nop
 8003332:	e7fe      	b.n	8003332 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d103      	bne.n	8003342 <xQueueGenericSend+0x6e>
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <xQueueGenericSend+0x72>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <xQueueGenericSend+0x74>
 8003346:	2300      	movs	r3, #0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <xQueueGenericSend+0x8e>
	__asm volatile
 800334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	623b      	str	r3, [r7, #32]
}
 800335e:	bf00      	nop
 8003360:	e7fe      	b.n	8003360 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003362:	f001 f9e7 	bl	8004734 <xTaskGetSchedulerState>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <xQueueGenericSend+0x9e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <xQueueGenericSend+0xa2>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <xQueueGenericSend+0xa4>
 8003376:	2300      	movs	r3, #0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10a      	bne.n	8003392 <xQueueGenericSend+0xbe>
	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	61fb      	str	r3, [r7, #28]
}
 800338e:	bf00      	nop
 8003390:	e7fe      	b.n	8003390 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003392:	f001 ff27 	bl	80051e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800339a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	429a      	cmp	r2, r3
 80033a0:	d302      	bcc.n	80033a8 <xQueueGenericSend+0xd4>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d129      	bne.n	80033fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	68b9      	ldr	r1, [r7, #8]
 80033ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ae:	f000 fa0b 	bl	80037c8 <prvCopyDataToQueue>
 80033b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d010      	beq.n	80033de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	3324      	adds	r3, #36	; 0x24
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fff5 	bl	80043b0 <xTaskRemoveFromEventList>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d013      	beq.n	80033f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80033cc:	4b3f      	ldr	r3, [pc, #252]	; (80034cc <xQueueGenericSend+0x1f8>)
 80033ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	f3bf 8f6f 	isb	sy
 80033dc:	e00a      	b.n	80033f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80033e4:	4b39      	ldr	r3, [pc, #228]	; (80034cc <xQueueGenericSend+0x1f8>)
 80033e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80033f4:	f001 ff26 	bl	8005244 <vPortExitCritical>
				return pdPASS;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e063      	b.n	80034c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d103      	bne.n	800340a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003402:	f001 ff1f 	bl	8005244 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003406:	2300      	movs	r3, #0
 8003408:	e05c      	b.n	80034c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800340a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340c:	2b00      	cmp	r3, #0
 800340e:	d106      	bne.n	800341e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003410:	f107 0314 	add.w	r3, r7, #20
 8003414:	4618      	mov	r0, r3
 8003416:	f001 f82f 	bl	8004478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800341a:	2301      	movs	r3, #1
 800341c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800341e:	f001 ff11 	bl	8005244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003422:	f000 fd9b 	bl	8003f5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003426:	f001 fedd 	bl	80051e4 <vPortEnterCritical>
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003430:	b25b      	sxtb	r3, r3
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003436:	d103      	bne.n	8003440 <xQueueGenericSend+0x16c>
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003446:	b25b      	sxtb	r3, r3
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d103      	bne.n	8003456 <xQueueGenericSend+0x182>
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003456:	f001 fef5 	bl	8005244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800345a:	1d3a      	adds	r2, r7, #4
 800345c:	f107 0314 	add.w	r3, r7, #20
 8003460:	4611      	mov	r1, r2
 8003462:	4618      	mov	r0, r3
 8003464:	f001 f81e 	bl	80044a4 <xTaskCheckForTimeOut>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d124      	bne.n	80034b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800346e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003470:	f000 faa2 	bl	80039b8 <prvIsQueueFull>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d018      	beq.n	80034ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347c:	3310      	adds	r3, #16
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f000 ff44 	bl	8004310 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800348a:	f000 fa2d 	bl	80038e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800348e:	f000 fd73 	bl	8003f78 <xTaskResumeAll>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	f47f af7c 	bne.w	8003392 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800349a:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <xQueueGenericSend+0x1f8>)
 800349c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	e772      	b.n	8003392 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80034ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034ae:	f000 fa1b 	bl	80038e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034b2:	f000 fd61 	bl	8003f78 <xTaskResumeAll>
 80034b6:	e76c      	b.n	8003392 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80034b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034ba:	f000 fa15 	bl	80038e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034be:	f000 fd5b 	bl	8003f78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80034c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3738      	adds	r7, #56	; 0x38
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	e000ed04 	.word	0xe000ed04

080034d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b090      	sub	sp, #64	; 0x40
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80034fa:	bf00      	nop
 80034fc:	e7fe      	b.n	80034fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d103      	bne.n	800350c <xQueueGenericSendFromISR+0x3c>
 8003504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <xQueueGenericSendFromISR+0x40>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <xQueueGenericSendFromISR+0x42>
 8003510:	2300      	movs	r3, #0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10a      	bne.n	800352c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003528:	bf00      	nop
 800352a:	e7fe      	b.n	800352a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d103      	bne.n	800353a <xQueueGenericSendFromISR+0x6a>
 8003532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <xQueueGenericSendFromISR+0x6e>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <xQueueGenericSendFromISR+0x70>
 800353e:	2300      	movs	r3, #0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	623b      	str	r3, [r7, #32]
}
 8003556:	bf00      	nop
 8003558:	e7fe      	b.n	8003558 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800355a:	f001 ff25 	bl	80053a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800355e:	f3ef 8211 	mrs	r2, BASEPRI
 8003562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	61fa      	str	r2, [r7, #28]
 8003574:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003576:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003578:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800357e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	429a      	cmp	r2, r3
 8003584:	d302      	bcc.n	800358c <xQueueGenericSendFromISR+0xbc>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d12f      	bne.n	80035ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800358c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80035a2:	f000 f911 	bl	80037c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80035a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80035aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ae:	d112      	bne.n	80035d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d016      	beq.n	80035e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ba:	3324      	adds	r3, #36	; 0x24
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fef7 	bl	80043b0 <xTaskRemoveFromEventList>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00e      	beq.n	80035e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	e007      	b.n	80035e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80035d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035da:	3301      	adds	r3, #1
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	b25a      	sxtb	r2, r3
 80035e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80035e6:	2301      	movs	r3, #1
 80035e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80035ea:	e001      	b.n	80035f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80035fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3740      	adds	r7, #64	; 0x40
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08c      	sub	sp, #48	; 0x30
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003614:	2300      	movs	r3, #0
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10a      	bne.n	8003638 <xQueueReceive+0x30>
	__asm volatile
 8003622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	623b      	str	r3, [r7, #32]
}
 8003634:	bf00      	nop
 8003636:	e7fe      	b.n	8003636 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <xQueueReceive+0x3e>
 800363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <xQueueReceive+0x42>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <xQueueReceive+0x44>
 800364a:	2300      	movs	r3, #0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <xQueueReceive+0x5e>
	__asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	61fb      	str	r3, [r7, #28]
}
 8003662:	bf00      	nop
 8003664:	e7fe      	b.n	8003664 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003666:	f001 f865 	bl	8004734 <xTaskGetSchedulerState>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d102      	bne.n	8003676 <xQueueReceive+0x6e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <xQueueReceive+0x72>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <xQueueReceive+0x74>
 800367a:	2300      	movs	r3, #0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <xQueueReceive+0x8e>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	61bb      	str	r3, [r7, #24]
}
 8003692:	bf00      	nop
 8003694:	e7fe      	b.n	8003694 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003696:	f001 fda5 	bl	80051e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01f      	beq.n	80036e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036aa:	f000 f8f7 	bl	800389c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	1e5a      	subs	r2, r3, #1
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00f      	beq.n	80036de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	3310      	adds	r3, #16
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fe74 	bl	80043b0 <xTaskRemoveFromEventList>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80036ce:	4b3d      	ldr	r3, [pc, #244]	; (80037c4 <xQueueReceive+0x1bc>)
 80036d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80036de:	f001 fdb1 	bl	8005244 <vPortExitCritical>
				return pdPASS;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e069      	b.n	80037ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d103      	bne.n	80036f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036ec:	f001 fdaa 	bl	8005244 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e062      	b.n	80037ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036fa:	f107 0310 	add.w	r3, r7, #16
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 feba 	bl	8004478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003704:	2301      	movs	r3, #1
 8003706:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003708:	f001 fd9c 	bl	8005244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800370c:	f000 fc26 	bl	8003f5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003710:	f001 fd68 	bl	80051e4 <vPortEnterCritical>
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800371a:	b25b      	sxtb	r3, r3
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d103      	bne.n	800372a <xQueueReceive+0x122>
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003730:	b25b      	sxtb	r3, r3
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003736:	d103      	bne.n	8003740 <xQueueReceive+0x138>
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003740:	f001 fd80 	bl	8005244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003744:	1d3a      	adds	r2, r7, #4
 8003746:	f107 0310 	add.w	r3, r7, #16
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fea9 	bl	80044a4 <xTaskCheckForTimeOut>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d123      	bne.n	80037a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800375a:	f000 f917 	bl	800398c <prvIsQueueEmpty>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d017      	beq.n	8003794 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	3324      	adds	r3, #36	; 0x24
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fdcf 	bl	8004310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003774:	f000 f8b8 	bl	80038e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003778:	f000 fbfe 	bl	8003f78 <xTaskResumeAll>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d189      	bne.n	8003696 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <xQueueReceive+0x1bc>)
 8003784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	e780      	b.n	8003696 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003796:	f000 f8a7 	bl	80038e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800379a:	f000 fbed 	bl	8003f78 <xTaskResumeAll>
 800379e:	e77a      	b.n	8003696 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80037a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037a2:	f000 f8a1 	bl	80038e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037a6:	f000 fbe7 	bl	8003f78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037ac:	f000 f8ee 	bl	800398c <prvIsQueueEmpty>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f43f af6f 	beq.w	8003696 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80037b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3730      	adds	r7, #48	; 0x30
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	e000ed04 	.word	0xe000ed04

080037c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10d      	bne.n	8003802 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d14d      	bne.n	800388a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 ffbc 	bl	8004770 <xTaskPriorityDisinherit>
 80037f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	e043      	b.n	800388a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d119      	bne.n	800383c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6858      	ldr	r0, [r3, #4]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	461a      	mov	r2, r3
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	f002 f876 	bl	8005904 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	441a      	add	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	429a      	cmp	r2, r3
 8003830:	d32b      	bcc.n	800388a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	e026      	b.n	800388a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68d8      	ldr	r0, [r3, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	461a      	mov	r2, r3
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	f002 f85c 	bl	8005904 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	425b      	negs	r3, r3
 8003856:	441a      	add	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d207      	bcs.n	8003878 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	425b      	negs	r3, r3
 8003872:	441a      	add	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d105      	bne.n	800388a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	3b01      	subs	r3, #1
 8003888:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003892:	697b      	ldr	r3, [r7, #20]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d018      	beq.n	80038e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	441a      	add	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d303      	bcc.n	80038d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68d9      	ldr	r1, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	461a      	mov	r2, r3
 80038da:	6838      	ldr	r0, [r7, #0]
 80038dc:	f002 f812 	bl	8005904 <memcpy>
	}
}
 80038e0:	bf00      	nop
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80038f0:	f001 fc78 	bl	80051e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038fc:	e011      	b.n	8003922 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	2b00      	cmp	r3, #0
 8003904:	d012      	beq.n	800392c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3324      	adds	r3, #36	; 0x24
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fd50 	bl	80043b0 <xTaskRemoveFromEventList>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003916:	f000 fe27 	bl	8004568 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	3b01      	subs	r3, #1
 800391e:	b2db      	uxtb	r3, r3
 8003920:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003926:	2b00      	cmp	r3, #0
 8003928:	dce9      	bgt.n	80038fe <prvUnlockQueue+0x16>
 800392a:	e000      	b.n	800392e <prvUnlockQueue+0x46>
					break;
 800392c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	22ff      	movs	r2, #255	; 0xff
 8003932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003936:	f001 fc85 	bl	8005244 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800393a:	f001 fc53 	bl	80051e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003944:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003946:	e011      	b.n	800396c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d012      	beq.n	8003976 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3310      	adds	r3, #16
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fd2b 	bl	80043b0 <xTaskRemoveFromEventList>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003960:	f000 fe02 	bl	8004568 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003964:	7bbb      	ldrb	r3, [r7, #14]
 8003966:	3b01      	subs	r3, #1
 8003968:	b2db      	uxtb	r3, r3
 800396a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800396c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003970:	2b00      	cmp	r3, #0
 8003972:	dce9      	bgt.n	8003948 <prvUnlockQueue+0x60>
 8003974:	e000      	b.n	8003978 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003976:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	22ff      	movs	r2, #255	; 0xff
 800397c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003980:	f001 fc60 	bl	8005244 <vPortExitCritical>
}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003994:	f001 fc26 	bl	80051e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039a0:	2301      	movs	r3, #1
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e001      	b.n	80039aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039aa:	f001 fc4b 	bl	8005244 <vPortExitCritical>

	return xReturn;
 80039ae:	68fb      	ldr	r3, [r7, #12]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039c0:	f001 fc10 	bl	80051e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d102      	bne.n	80039d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80039d0:	2301      	movs	r3, #1
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	e001      	b.n	80039da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039da:	f001 fc33 	bl	8005244 <vPortExitCritical>

	return xReturn;
 80039de:	68fb      	ldr	r3, [r7, #12]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	e014      	b.n	8003a22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80039f8:	4a0f      	ldr	r2, [pc, #60]	; (8003a38 <vQueueAddToRegistry+0x50>)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a04:	490c      	ldr	r1, [pc, #48]	; (8003a38 <vQueueAddToRegistry+0x50>)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <vQueueAddToRegistry+0x50>)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a1a:	e006      	b.n	8003a2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b07      	cmp	r3, #7
 8003a26:	d9e7      	bls.n	80039f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	2000087c 	.word	0x2000087c

08003a3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a4c:	f001 fbca 	bl	80051e4 <vPortEnterCritical>
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a56:	b25b      	sxtb	r3, r3
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5c:	d103      	bne.n	8003a66 <vQueueWaitForMessageRestricted+0x2a>
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a6c:	b25b      	sxtb	r3, r3
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a72:	d103      	bne.n	8003a7c <vQueueWaitForMessageRestricted+0x40>
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a7c:	f001 fbe2 	bl	8005244 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d106      	bne.n	8003a96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3324      	adds	r3, #36	; 0x24
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fc61 	bl	8004358 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a96:	6978      	ldr	r0, [r7, #20]
 8003a98:	f7ff ff26 	bl	80038e8 <prvUnlockQueue>
	}
 8003a9c:	bf00      	nop
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08e      	sub	sp, #56	; 0x38
 8003aa8:	af04      	add	r7, sp, #16
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10a      	bne.n	8003ace <xTaskCreateStatic+0x2a>
	__asm volatile
 8003ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abc:	f383 8811 	msr	BASEPRI, r3
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	623b      	str	r3, [r7, #32]
}
 8003aca:	bf00      	nop
 8003acc:	e7fe      	b.n	8003acc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10a      	bne.n	8003aea <xTaskCreateStatic+0x46>
	__asm volatile
 8003ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad8:	f383 8811 	msr	BASEPRI, r3
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	61fb      	str	r3, [r7, #28]
}
 8003ae6:	bf00      	nop
 8003ae8:	e7fe      	b.n	8003ae8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003aea:	23a8      	movs	r3, #168	; 0xa8
 8003aec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2ba8      	cmp	r3, #168	; 0xa8
 8003af2:	d00a      	beq.n	8003b0a <xTaskCreateStatic+0x66>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	61bb      	str	r3, [r7, #24]
}
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d01e      	beq.n	8003b50 <xTaskCreateStatic+0xac>
 8003b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01b      	beq.n	8003b50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	2202      	movs	r2, #2
 8003b26:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	9303      	str	r3, [sp, #12]
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	9302      	str	r3, [sp, #8]
 8003b32:	f107 0314 	add.w	r3, r7, #20
 8003b36:	9301      	str	r3, [sp, #4]
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f850 	bl	8003be8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b4a:	f000 f8f3 	bl	8003d34 <prvAddNewTaskToReadyList>
 8003b4e:	e001      	b.n	8003b54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b54:	697b      	ldr	r3, [r7, #20]
	}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3728      	adds	r7, #40	; 0x28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b08c      	sub	sp, #48	; 0x30
 8003b62:	af04      	add	r7, sp, #16
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 fc58 	bl	8005428 <pvPortMalloc>
 8003b78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00e      	beq.n	8003b9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b80:	20a8      	movs	r0, #168	; 0xa8
 8003b82:	f001 fc51 	bl	8005428 <pvPortMalloc>
 8003b86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
 8003b94:	e005      	b.n	8003ba2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b96:	6978      	ldr	r0, [r7, #20]
 8003b98:	f001 fd12 	bl	80055c0 <vPortFree>
 8003b9c:	e001      	b.n	8003ba2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d017      	beq.n	8003bd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bb0:	88fa      	ldrh	r2, [r7, #6]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	9303      	str	r3, [sp, #12]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	9302      	str	r3, [sp, #8]
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f80e 	bl	8003be8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bcc:	69f8      	ldr	r0, [r7, #28]
 8003bce:	f000 f8b1 	bl	8003d34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	e002      	b.n	8003bde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003bde:	69bb      	ldr	r3, [r7, #24]
	}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3720      	adds	r7, #32
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	461a      	mov	r2, r3
 8003c00:	21a5      	movs	r1, #165	; 0xa5
 8003c02:	f001 fdfb 	bl	80057fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c10:	3b01      	subs	r3, #1
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f023 0307 	bic.w	r3, r3, #7
 8003c1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	617b      	str	r3, [r7, #20]
}
 8003c3c:	bf00      	nop
 8003c3e:	e7fe      	b.n	8003c3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d01f      	beq.n	8003c86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
 8003c4a:	e012      	b.n	8003c72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	7819      	ldrb	r1, [r3, #0]
 8003c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	4413      	add	r3, r2
 8003c5a:	3334      	adds	r3, #52	; 0x34
 8003c5c:	460a      	mov	r2, r1
 8003c5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d006      	beq.n	8003c7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	2b0f      	cmp	r3, #15
 8003c76:	d9e9      	bls.n	8003c4c <prvInitialiseNewTask+0x64>
 8003c78:	e000      	b.n	8003c7c <prvInitialiseNewTask+0x94>
			{
				break;
 8003c7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c84:	e003      	b.n	8003c8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c90:	2b37      	cmp	r3, #55	; 0x37
 8003c92:	d901      	bls.n	8003c98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c94:	2337      	movs	r3, #55	; 0x37
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ca2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	3304      	adds	r3, #4
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff f978 	bl	8002fa4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb6:	3318      	adds	r3, #24
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff f973 	bl	8002fa4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	3354      	adds	r3, #84	; 0x54
 8003ce8:	224c      	movs	r2, #76	; 0x4c
 8003cea:	2100      	movs	r1, #0
 8003cec:	4618      	mov	r0, r3
 8003cee:	f001 fd85 	bl	80057fc <memset>
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	4a0c      	ldr	r2, [pc, #48]	; (8003d28 <prvInitialiseNewTask+0x140>)
 8003cf6:	659a      	str	r2, [r3, #88]	; 0x58
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	4a0c      	ldr	r2, [pc, #48]	; (8003d2c <prvInitialiseNewTask+0x144>)
 8003cfc:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	4a0b      	ldr	r2, [pc, #44]	; (8003d30 <prvInitialiseNewTask+0x148>)
 8003d02:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	68f9      	ldr	r1, [r7, #12]
 8003d08:	69b8      	ldr	r0, [r7, #24]
 8003d0a:	f001 f941 	bl	8004f90 <pxPortInitialiseStack>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d20:	bf00      	nop
 8003d22:	3720      	adds	r7, #32
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20004b10 	.word	0x20004b10
 8003d2c:	20004b78 	.word	0x20004b78
 8003d30:	20004be0 	.word	0x20004be0

08003d34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d3c:	f001 fa52 	bl	80051e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d40:	4b2d      	ldr	r3, [pc, #180]	; (8003df8 <prvAddNewTaskToReadyList+0xc4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	4a2c      	ldr	r2, [pc, #176]	; (8003df8 <prvAddNewTaskToReadyList+0xc4>)
 8003d48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d4a:	4b2c      	ldr	r3, [pc, #176]	; (8003dfc <prvAddNewTaskToReadyList+0xc8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d52:	4a2a      	ldr	r2, [pc, #168]	; (8003dfc <prvAddNewTaskToReadyList+0xc8>)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d58:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <prvAddNewTaskToReadyList+0xc4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d110      	bne.n	8003d82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d60:	f000 fc26 	bl	80045b0 <prvInitialiseTaskLists>
 8003d64:	e00d      	b.n	8003d82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d66:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <prvAddNewTaskToReadyList+0xcc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d6e:	4b23      	ldr	r3, [pc, #140]	; (8003dfc <prvAddNewTaskToReadyList+0xc8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d802      	bhi.n	8003d82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d7c:	4a1f      	ldr	r2, [pc, #124]	; (8003dfc <prvAddNewTaskToReadyList+0xc8>)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d82:	4b20      	ldr	r3, [pc, #128]	; (8003e04 <prvAddNewTaskToReadyList+0xd0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3301      	adds	r3, #1
 8003d88:	4a1e      	ldr	r2, [pc, #120]	; (8003e04 <prvAddNewTaskToReadyList+0xd0>)
 8003d8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d8c:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <prvAddNewTaskToReadyList+0xd0>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <prvAddNewTaskToReadyList+0xd4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d903      	bls.n	8003da8 <prvAddNewTaskToReadyList+0x74>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <prvAddNewTaskToReadyList+0xd4>)
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4a15      	ldr	r2, [pc, #84]	; (8003e0c <prvAddNewTaskToReadyList+0xd8>)
 8003db6:	441a      	add	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f7ff f8fd 	bl	8002fbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003dc4:	f001 fa3e 	bl	8005244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <prvAddNewTaskToReadyList+0xcc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00e      	beq.n	8003dee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003dd0:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <prvAddNewTaskToReadyList+0xc8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d207      	bcs.n	8003dee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003dde:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <prvAddNewTaskToReadyList+0xdc>)
 8003de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000d90 	.word	0x20000d90
 8003dfc:	200008bc 	.word	0x200008bc
 8003e00:	20000d9c 	.word	0x20000d9c
 8003e04:	20000dac 	.word	0x20000dac
 8003e08:	20000d98 	.word	0x20000d98
 8003e0c:	200008c0 	.word	0x200008c0
 8003e10:	e000ed04 	.word	0xe000ed04

08003e14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d017      	beq.n	8003e56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e26:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <vTaskDelay+0x60>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <vTaskDelay+0x30>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	60bb      	str	r3, [r7, #8]
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e44:	f000 f88a 	bl	8003f5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e48:	2100      	movs	r1, #0
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fcfe 	bl	800484c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e50:	f000 f892 	bl	8003f78 <xTaskResumeAll>
 8003e54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d107      	bne.n	8003e6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <vTaskDelay+0x64>)
 8003e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000db8 	.word	0x20000db8
 8003e78:	e000ed04 	.word	0xe000ed04

08003e7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	; 0x28
 8003e80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e8a:	463a      	mov	r2, r7
 8003e8c:	1d39      	adds	r1, r7, #4
 8003e8e:	f107 0308 	add.w	r3, r7, #8
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff f832 	bl	8002efc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e98:	6839      	ldr	r1, [r7, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	9202      	str	r2, [sp, #8]
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	460a      	mov	r2, r1
 8003eaa:	4924      	ldr	r1, [pc, #144]	; (8003f3c <vTaskStartScheduler+0xc0>)
 8003eac:	4824      	ldr	r0, [pc, #144]	; (8003f40 <vTaskStartScheduler+0xc4>)
 8003eae:	f7ff fdf9 	bl	8003aa4 <xTaskCreateStatic>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	4a23      	ldr	r2, [pc, #140]	; (8003f44 <vTaskStartScheduler+0xc8>)
 8003eb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003eb8:	4b22      	ldr	r3, [pc, #136]	; (8003f44 <vTaskStartScheduler+0xc8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	e001      	b.n	8003eca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d102      	bne.n	8003ed6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ed0:	f000 fd10 	bl	80048f4 <xTimerCreateTimerTask>
 8003ed4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d11b      	bne.n	8003f14 <vTaskStartScheduler+0x98>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	613b      	str	r3, [r7, #16]
}
 8003eee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ef0:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <vTaskStartScheduler+0xcc>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3354      	adds	r3, #84	; 0x54
 8003ef6:	4a15      	ldr	r2, [pc, #84]	; (8003f4c <vTaskStartScheduler+0xd0>)
 8003ef8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <vTaskStartScheduler+0xd4>)
 8003efc:	f04f 32ff 	mov.w	r2, #4294967295
 8003f00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f02:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <vTaskStartScheduler+0xd8>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f08:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <vTaskStartScheduler+0xdc>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f0e:	f001 f8c7 	bl	80050a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f12:	e00e      	b.n	8003f32 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1a:	d10a      	bne.n	8003f32 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	60fb      	str	r3, [r7, #12]
}
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <vTaskStartScheduler+0xb4>
}
 8003f32:	bf00      	nop
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	08005a64 	.word	0x08005a64
 8003f40:	08004581 	.word	0x08004581
 8003f44:	20000db4 	.word	0x20000db4
 8003f48:	200008bc 	.word	0x200008bc
 8003f4c:	2000005c 	.word	0x2000005c
 8003f50:	20000db0 	.word	0x20000db0
 8003f54:	20000d9c 	.word	0x20000d9c
 8003f58:	20000d94 	.word	0x20000d94

08003f5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f60:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <vTaskSuspendAll+0x18>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3301      	adds	r3, #1
 8003f66:	4a03      	ldr	r2, [pc, #12]	; (8003f74 <vTaskSuspendAll+0x18>)
 8003f68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f6a:	bf00      	nop
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	20000db8 	.word	0x20000db8

08003f78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f86:	4b42      	ldr	r3, [pc, #264]	; (8004090 <xTaskResumeAll+0x118>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	603b      	str	r3, [r7, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	e7fe      	b.n	8003fa2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fa4:	f001 f91e 	bl	80051e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fa8:	4b39      	ldr	r3, [pc, #228]	; (8004090 <xTaskResumeAll+0x118>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	4a38      	ldr	r2, [pc, #224]	; (8004090 <xTaskResumeAll+0x118>)
 8003fb0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <xTaskResumeAll+0x118>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d162      	bne.n	8004080 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fba:	4b36      	ldr	r3, [pc, #216]	; (8004094 <xTaskResumeAll+0x11c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d05e      	beq.n	8004080 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fc2:	e02f      	b.n	8004024 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fc4:	4b34      	ldr	r3, [pc, #208]	; (8004098 <xTaskResumeAll+0x120>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3318      	adds	r3, #24
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff f851 	bl	8003078 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff f84c 	bl	8003078 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe4:	4b2d      	ldr	r3, [pc, #180]	; (800409c <xTaskResumeAll+0x124>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d903      	bls.n	8003ff4 <xTaskResumeAll+0x7c>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	4a2a      	ldr	r2, [pc, #168]	; (800409c <xTaskResumeAll+0x124>)
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4a27      	ldr	r2, [pc, #156]	; (80040a0 <xTaskResumeAll+0x128>)
 8004002:	441a      	add	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f7fe ffd7 	bl	8002fbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004014:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <xTaskResumeAll+0x12c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	429a      	cmp	r2, r3
 800401c:	d302      	bcc.n	8004024 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800401e:	4b22      	ldr	r3, [pc, #136]	; (80040a8 <xTaskResumeAll+0x130>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004024:	4b1c      	ldr	r3, [pc, #112]	; (8004098 <xTaskResumeAll+0x120>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1cb      	bne.n	8003fc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004032:	f000 fb5f 	bl	80046f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <xTaskResumeAll+0x134>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d010      	beq.n	8004064 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004042:	f000 f847 	bl	80040d4 <xTaskIncrementTick>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800404c:	4b16      	ldr	r3, [pc, #88]	; (80040a8 <xTaskResumeAll+0x130>)
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3b01      	subs	r3, #1
 8004056:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f1      	bne.n	8004042 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800405e:	4b13      	ldr	r3, [pc, #76]	; (80040ac <xTaskResumeAll+0x134>)
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004064:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <xTaskResumeAll+0x130>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d009      	beq.n	8004080 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <xTaskResumeAll+0x138>)
 8004072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004080:	f001 f8e0 	bl	8005244 <vPortExitCritical>

	return xAlreadyYielded;
 8004084:	68bb      	ldr	r3, [r7, #8]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000db8 	.word	0x20000db8
 8004094:	20000d90 	.word	0x20000d90
 8004098:	20000d50 	.word	0x20000d50
 800409c:	20000d98 	.word	0x20000d98
 80040a0:	200008c0 	.word	0x200008c0
 80040a4:	200008bc 	.word	0x200008bc
 80040a8:	20000da4 	.word	0x20000da4
 80040ac:	20000da0 	.word	0x20000da0
 80040b0:	e000ed04 	.word	0xe000ed04

080040b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <xTaskGetTickCount+0x1c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80040c0:	687b      	ldr	r3, [r7, #4]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	20000d94 	.word	0x20000d94

080040d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040de:	4b4f      	ldr	r3, [pc, #316]	; (800421c <xTaskIncrementTick+0x148>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f040 808f 	bne.w	8004206 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040e8:	4b4d      	ldr	r3, [pc, #308]	; (8004220 <xTaskIncrementTick+0x14c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3301      	adds	r3, #1
 80040ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040f0:	4a4b      	ldr	r2, [pc, #300]	; (8004220 <xTaskIncrementTick+0x14c>)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d120      	bne.n	800413e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80040fc:	4b49      	ldr	r3, [pc, #292]	; (8004224 <xTaskIncrementTick+0x150>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <xTaskIncrementTick+0x48>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	603b      	str	r3, [r7, #0]
}
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <xTaskIncrementTick+0x46>
 800411c:	4b41      	ldr	r3, [pc, #260]	; (8004224 <xTaskIncrementTick+0x150>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	4b41      	ldr	r3, [pc, #260]	; (8004228 <xTaskIncrementTick+0x154>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a3f      	ldr	r2, [pc, #252]	; (8004224 <xTaskIncrementTick+0x150>)
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4a3f      	ldr	r2, [pc, #252]	; (8004228 <xTaskIncrementTick+0x154>)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4b3e      	ldr	r3, [pc, #248]	; (800422c <xTaskIncrementTick+0x158>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3301      	adds	r3, #1
 8004136:	4a3d      	ldr	r2, [pc, #244]	; (800422c <xTaskIncrementTick+0x158>)
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	f000 fadb 	bl	80046f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800413e:	4b3c      	ldr	r3, [pc, #240]	; (8004230 <xTaskIncrementTick+0x15c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	429a      	cmp	r2, r3
 8004146:	d349      	bcc.n	80041dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004148:	4b36      	ldr	r3, [pc, #216]	; (8004224 <xTaskIncrementTick+0x150>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d104      	bne.n	800415c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004152:	4b37      	ldr	r3, [pc, #220]	; (8004230 <xTaskIncrementTick+0x15c>)
 8004154:	f04f 32ff 	mov.w	r2, #4294967295
 8004158:	601a      	str	r2, [r3, #0]
					break;
 800415a:	e03f      	b.n	80041dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800415c:	4b31      	ldr	r3, [pc, #196]	; (8004224 <xTaskIncrementTick+0x150>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	429a      	cmp	r2, r3
 8004172:	d203      	bcs.n	800417c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004174:	4a2e      	ldr	r2, [pc, #184]	; (8004230 <xTaskIncrementTick+0x15c>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800417a:	e02f      	b.n	80041dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	3304      	adds	r3, #4
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe ff79 	bl	8003078 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	3318      	adds	r3, #24
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe ff70 	bl	8003078 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419c:	4b25      	ldr	r3, [pc, #148]	; (8004234 <xTaskIncrementTick+0x160>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d903      	bls.n	80041ac <xTaskIncrementTick+0xd8>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	4a22      	ldr	r2, [pc, #136]	; (8004234 <xTaskIncrementTick+0x160>)
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <xTaskIncrementTick+0x164>)
 80041ba:	441a      	add	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	3304      	adds	r3, #4
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f7fe fefb 	bl	8002fbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041cc:	4b1b      	ldr	r3, [pc, #108]	; (800423c <xTaskIncrementTick+0x168>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d3b8      	bcc.n	8004148 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80041d6:	2301      	movs	r3, #1
 80041d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041da:	e7b5      	b.n	8004148 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041dc:	4b17      	ldr	r3, [pc, #92]	; (800423c <xTaskIncrementTick+0x168>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e2:	4915      	ldr	r1, [pc, #84]	; (8004238 <xTaskIncrementTick+0x164>)
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d901      	bls.n	80041f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80041f8:	4b11      	ldr	r3, [pc, #68]	; (8004240 <xTaskIncrementTick+0x16c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d007      	beq.n	8004210 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004200:	2301      	movs	r3, #1
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e004      	b.n	8004210 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004206:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <xTaskIncrementTick+0x170>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3301      	adds	r3, #1
 800420c:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <xTaskIncrementTick+0x170>)
 800420e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004210:	697b      	ldr	r3, [r7, #20]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000db8 	.word	0x20000db8
 8004220:	20000d94 	.word	0x20000d94
 8004224:	20000d48 	.word	0x20000d48
 8004228:	20000d4c 	.word	0x20000d4c
 800422c:	20000da8 	.word	0x20000da8
 8004230:	20000db0 	.word	0x20000db0
 8004234:	20000d98 	.word	0x20000d98
 8004238:	200008c0 	.word	0x200008c0
 800423c:	200008bc 	.word	0x200008bc
 8004240:	20000da4 	.word	0x20000da4
 8004244:	20000da0 	.word	0x20000da0

08004248 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800424e:	4b2a      	ldr	r3, [pc, #168]	; (80042f8 <vTaskSwitchContext+0xb0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004256:	4b29      	ldr	r3, [pc, #164]	; (80042fc <vTaskSwitchContext+0xb4>)
 8004258:	2201      	movs	r2, #1
 800425a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800425c:	e046      	b.n	80042ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800425e:	4b27      	ldr	r3, [pc, #156]	; (80042fc <vTaskSwitchContext+0xb4>)
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004264:	4b26      	ldr	r3, [pc, #152]	; (8004300 <vTaskSwitchContext+0xb8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	e010      	b.n	800428e <vTaskSwitchContext+0x46>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10a      	bne.n	8004288 <vTaskSwitchContext+0x40>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	607b      	str	r3, [r7, #4]
}
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <vTaskSwitchContext+0x3e>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3b01      	subs	r3, #1
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	491d      	ldr	r1, [pc, #116]	; (8004304 <vTaskSwitchContext+0xbc>)
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0e4      	beq.n	800426c <vTaskSwitchContext+0x24>
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4a15      	ldr	r2, [pc, #84]	; (8004304 <vTaskSwitchContext+0xbc>)
 80042ae:	4413      	add	r3, r2
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	605a      	str	r2, [r3, #4]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	3308      	adds	r3, #8
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d104      	bne.n	80042d2 <vTaskSwitchContext+0x8a>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	605a      	str	r2, [r3, #4]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4a0b      	ldr	r2, [pc, #44]	; (8004308 <vTaskSwitchContext+0xc0>)
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	4a08      	ldr	r2, [pc, #32]	; (8004300 <vTaskSwitchContext+0xb8>)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80042e2:	4b09      	ldr	r3, [pc, #36]	; (8004308 <vTaskSwitchContext+0xc0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3354      	adds	r3, #84	; 0x54
 80042e8:	4a08      	ldr	r2, [pc, #32]	; (800430c <vTaskSwitchContext+0xc4>)
 80042ea:	6013      	str	r3, [r2, #0]
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	20000db8 	.word	0x20000db8
 80042fc:	20000da4 	.word	0x20000da4
 8004300:	20000d98 	.word	0x20000d98
 8004304:	200008c0 	.word	0x200008c0
 8004308:	200008bc 	.word	0x200008bc
 800430c:	2000005c 	.word	0x2000005c

08004310 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	60fb      	str	r3, [r7, #12]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004336:	4b07      	ldr	r3, [pc, #28]	; (8004354 <vTaskPlaceOnEventList+0x44>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3318      	adds	r3, #24
 800433c:	4619      	mov	r1, r3
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fe fe61 	bl	8003006 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004344:	2101      	movs	r1, #1
 8004346:	6838      	ldr	r0, [r7, #0]
 8004348:	f000 fa80 	bl	800484c <prvAddCurrentTaskToDelayedList>
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	200008bc 	.word	0x200008bc

08004358 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10a      	bne.n	8004380 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	617b      	str	r3, [r7, #20]
}
 800437c:	bf00      	nop
 800437e:	e7fe      	b.n	800437e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004380:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <vTaskPlaceOnEventListRestricted+0x54>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3318      	adds	r3, #24
 8004386:	4619      	mov	r1, r3
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f7fe fe18 	bl	8002fbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004394:	f04f 33ff 	mov.w	r3, #4294967295
 8004398:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	68b8      	ldr	r0, [r7, #8]
 800439e:	f000 fa55 	bl	800484c <prvAddCurrentTaskToDelayedList>
	}
 80043a2:	bf00      	nop
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	200008bc 	.word	0x200008bc

080043b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	60fb      	str	r3, [r7, #12]
}
 80043d8:	bf00      	nop
 80043da:	e7fe      	b.n	80043da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	3318      	adds	r3, #24
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fe fe49 	bl	8003078 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043e6:	4b1e      	ldr	r3, [pc, #120]	; (8004460 <xTaskRemoveFromEventList+0xb0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d11d      	bne.n	800442a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	3304      	adds	r3, #4
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fe fe40 	bl	8003078 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fc:	4b19      	ldr	r3, [pc, #100]	; (8004464 <xTaskRemoveFromEventList+0xb4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d903      	bls.n	800440c <xTaskRemoveFromEventList+0x5c>
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	4a16      	ldr	r2, [pc, #88]	; (8004464 <xTaskRemoveFromEventList+0xb4>)
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4a13      	ldr	r2, [pc, #76]	; (8004468 <xTaskRemoveFromEventList+0xb8>)
 800441a:	441a      	add	r2, r3
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f7fe fdcb 	bl	8002fbe <vListInsertEnd>
 8004428:	e005      	b.n	8004436 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	3318      	adds	r3, #24
 800442e:	4619      	mov	r1, r3
 8004430:	480e      	ldr	r0, [pc, #56]	; (800446c <xTaskRemoveFromEventList+0xbc>)
 8004432:	f7fe fdc4 	bl	8002fbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443a:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <xTaskRemoveFromEventList+0xc0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	429a      	cmp	r2, r3
 8004442:	d905      	bls.n	8004450 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004444:	2301      	movs	r3, #1
 8004446:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <xTaskRemoveFromEventList+0xc4>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e001      	b.n	8004454 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004454:	697b      	ldr	r3, [r7, #20]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20000db8 	.word	0x20000db8
 8004464:	20000d98 	.word	0x20000d98
 8004468:	200008c0 	.word	0x200008c0
 800446c:	20000d50 	.word	0x20000d50
 8004470:	200008bc 	.word	0x200008bc
 8004474:	20000da4 	.word	0x20000da4

08004478 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004480:	4b06      	ldr	r3, [pc, #24]	; (800449c <vTaskInternalSetTimeOutState+0x24>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004488:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <vTaskInternalSetTimeOutState+0x28>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	605a      	str	r2, [r3, #4]
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	20000da8 	.word	0x20000da8
 80044a0:	20000d94 	.word	0x20000d94

080044a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	613b      	str	r3, [r7, #16]
}
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10a      	bne.n	80044e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	60fb      	str	r3, [r7, #12]
}
 80044e2:	bf00      	nop
 80044e4:	e7fe      	b.n	80044e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80044e6:	f000 fe7d 	bl	80051e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044ea:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <xTaskCheckForTimeOut+0xbc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004502:	d102      	bne.n	800450a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
 8004508:	e023      	b.n	8004552 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	4b15      	ldr	r3, [pc, #84]	; (8004564 <xTaskCheckForTimeOut+0xc0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d007      	beq.n	8004526 <xTaskCheckForTimeOut+0x82>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	429a      	cmp	r2, r3
 800451e:	d302      	bcc.n	8004526 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004520:	2301      	movs	r3, #1
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	e015      	b.n	8004552 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	429a      	cmp	r2, r3
 800452e:	d20b      	bcs.n	8004548 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	1ad2      	subs	r2, r2, r3
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff ff9b 	bl	8004478 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
 8004546:	e004      	b.n	8004552 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800454e:	2301      	movs	r3, #1
 8004550:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004552:	f000 fe77 	bl	8005244 <vPortExitCritical>

	return xReturn;
 8004556:	69fb      	ldr	r3, [r7, #28]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3720      	adds	r7, #32
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20000d94 	.word	0x20000d94
 8004564:	20000da8 	.word	0x20000da8

08004568 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800456c:	4b03      	ldr	r3, [pc, #12]	; (800457c <vTaskMissedYield+0x14>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]
}
 8004572:	bf00      	nop
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	20000da4 	.word	0x20000da4

08004580 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004588:	f000 f852 	bl	8004630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <prvIdleTask+0x28>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d9f9      	bls.n	8004588 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <prvIdleTask+0x2c>)
 8004596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045a4:	e7f0      	b.n	8004588 <prvIdleTask+0x8>
 80045a6:	bf00      	nop
 80045a8:	200008c0 	.word	0x200008c0
 80045ac:	e000ed04 	.word	0xe000ed04

080045b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045b6:	2300      	movs	r3, #0
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	e00c      	b.n	80045d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4a12      	ldr	r2, [pc, #72]	; (8004610 <prvInitialiseTaskLists+0x60>)
 80045c8:	4413      	add	r3, r2
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe fcca 	bl	8002f64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3301      	adds	r3, #1
 80045d4:	607b      	str	r3, [r7, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b37      	cmp	r3, #55	; 0x37
 80045da:	d9ef      	bls.n	80045bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045dc:	480d      	ldr	r0, [pc, #52]	; (8004614 <prvInitialiseTaskLists+0x64>)
 80045de:	f7fe fcc1 	bl	8002f64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045e2:	480d      	ldr	r0, [pc, #52]	; (8004618 <prvInitialiseTaskLists+0x68>)
 80045e4:	f7fe fcbe 	bl	8002f64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045e8:	480c      	ldr	r0, [pc, #48]	; (800461c <prvInitialiseTaskLists+0x6c>)
 80045ea:	f7fe fcbb 	bl	8002f64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045ee:	480c      	ldr	r0, [pc, #48]	; (8004620 <prvInitialiseTaskLists+0x70>)
 80045f0:	f7fe fcb8 	bl	8002f64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045f4:	480b      	ldr	r0, [pc, #44]	; (8004624 <prvInitialiseTaskLists+0x74>)
 80045f6:	f7fe fcb5 	bl	8002f64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <prvInitialiseTaskLists+0x78>)
 80045fc:	4a05      	ldr	r2, [pc, #20]	; (8004614 <prvInitialiseTaskLists+0x64>)
 80045fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004600:	4b0a      	ldr	r3, [pc, #40]	; (800462c <prvInitialiseTaskLists+0x7c>)
 8004602:	4a05      	ldr	r2, [pc, #20]	; (8004618 <prvInitialiseTaskLists+0x68>)
 8004604:	601a      	str	r2, [r3, #0]
}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	200008c0 	.word	0x200008c0
 8004614:	20000d20 	.word	0x20000d20
 8004618:	20000d34 	.word	0x20000d34
 800461c:	20000d50 	.word	0x20000d50
 8004620:	20000d64 	.word	0x20000d64
 8004624:	20000d7c 	.word	0x20000d7c
 8004628:	20000d48 	.word	0x20000d48
 800462c:	20000d4c 	.word	0x20000d4c

08004630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004636:	e019      	b.n	800466c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004638:	f000 fdd4 	bl	80051e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800463c:	4b10      	ldr	r3, [pc, #64]	; (8004680 <prvCheckTasksWaitingTermination+0x50>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3304      	adds	r3, #4
 8004648:	4618      	mov	r0, r3
 800464a:	f7fe fd15 	bl	8003078 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800464e:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <prvCheckTasksWaitingTermination+0x54>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3b01      	subs	r3, #1
 8004654:	4a0b      	ldr	r2, [pc, #44]	; (8004684 <prvCheckTasksWaitingTermination+0x54>)
 8004656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <prvCheckTasksWaitingTermination+0x58>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3b01      	subs	r3, #1
 800465e:	4a0a      	ldr	r2, [pc, #40]	; (8004688 <prvCheckTasksWaitingTermination+0x58>)
 8004660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004662:	f000 fdef 	bl	8005244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f810 	bl	800468c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <prvCheckTasksWaitingTermination+0x58>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e1      	bne.n	8004638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20000d64 	.word	0x20000d64
 8004684:	20000d90 	.word	0x20000d90
 8004688:	20000d78 	.word	0x20000d78

0800468c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3354      	adds	r3, #84	; 0x54
 8004698:	4618      	mov	r0, r3
 800469a:	f001 f8b7 	bl	800580c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d108      	bne.n	80046ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 ff87 	bl	80055c0 <vPortFree>
				vPortFree( pxTCB );
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 ff84 	bl	80055c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046b8:	e018      	b.n	80046ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d103      	bne.n	80046cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 ff7b 	bl	80055c0 <vPortFree>
	}
 80046ca:	e00f      	b.n	80046ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d00a      	beq.n	80046ec <prvDeleteTCB+0x60>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	60fb      	str	r3, [r7, #12]
}
 80046e8:	bf00      	nop
 80046ea:	e7fe      	b.n	80046ea <prvDeleteTCB+0x5e>
	}
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046fa:	4b0c      	ldr	r3, [pc, #48]	; (800472c <prvResetNextTaskUnblockTime+0x38>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004704:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <prvResetNextTaskUnblockTime+0x3c>)
 8004706:	f04f 32ff 	mov.w	r2, #4294967295
 800470a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800470c:	e008      	b.n	8004720 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800470e:	4b07      	ldr	r3, [pc, #28]	; (800472c <prvResetNextTaskUnblockTime+0x38>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4a04      	ldr	r2, [pc, #16]	; (8004730 <prvResetNextTaskUnblockTime+0x3c>)
 800471e:	6013      	str	r3, [r2, #0]
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	20000d48 	.word	0x20000d48
 8004730:	20000db0 	.word	0x20000db0

08004734 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <xTaskGetSchedulerState+0x34>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d102      	bne.n	8004748 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004742:	2301      	movs	r3, #1
 8004744:	607b      	str	r3, [r7, #4]
 8004746:	e008      	b.n	800475a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004748:	4b08      	ldr	r3, [pc, #32]	; (800476c <xTaskGetSchedulerState+0x38>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004750:	2302      	movs	r3, #2
 8004752:	607b      	str	r3, [r7, #4]
 8004754:	e001      	b.n	800475a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004756:	2300      	movs	r3, #0
 8004758:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800475a:	687b      	ldr	r3, [r7, #4]
	}
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	20000d9c 	.word	0x20000d9c
 800476c:	20000db8 	.word	0x20000db8

08004770 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800477c:	2300      	movs	r3, #0
 800477e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d056      	beq.n	8004834 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004786:	4b2e      	ldr	r3, [pc, #184]	; (8004840 <xTaskPriorityDisinherit+0xd0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	429a      	cmp	r2, r3
 800478e:	d00a      	beq.n	80047a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	60fb      	str	r3, [r7, #12]
}
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	60bb      	str	r3, [r7, #8]
}
 80047c0:	bf00      	nop
 80047c2:	e7fe      	b.n	80047c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c8:	1e5a      	subs	r2, r3, #1
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d02c      	beq.n	8004834 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d128      	bne.n	8004834 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe fc46 	bl	8003078 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004804:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <xTaskPriorityDisinherit+0xd4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d903      	bls.n	8004814 <xTaskPriorityDisinherit+0xa4>
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	4a0c      	ldr	r2, [pc, #48]	; (8004844 <xTaskPriorityDisinherit+0xd4>)
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4a09      	ldr	r2, [pc, #36]	; (8004848 <xTaskPriorityDisinherit+0xd8>)
 8004822:	441a      	add	r2, r3
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	3304      	adds	r3, #4
 8004828:	4619      	mov	r1, r3
 800482a:	4610      	mov	r0, r2
 800482c:	f7fe fbc7 	bl	8002fbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004830:	2301      	movs	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004834:	697b      	ldr	r3, [r7, #20]
	}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	200008bc 	.word	0x200008bc
 8004844:	20000d98 	.word	0x20000d98
 8004848:	200008c0 	.word	0x200008c0

0800484c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004856:	4b21      	ldr	r3, [pc, #132]	; (80048dc <prvAddCurrentTaskToDelayedList+0x90>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800485c:	4b20      	ldr	r3, [pc, #128]	; (80048e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3304      	adds	r3, #4
 8004862:	4618      	mov	r0, r3
 8004864:	f7fe fc08 	bl	8003078 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486e:	d10a      	bne.n	8004886 <prvAddCurrentTaskToDelayedList+0x3a>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d007      	beq.n	8004886 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004876:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3304      	adds	r3, #4
 800487c:	4619      	mov	r1, r3
 800487e:	4819      	ldr	r0, [pc, #100]	; (80048e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004880:	f7fe fb9d 	bl	8002fbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004884:	e026      	b.n	80048d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4413      	add	r3, r2
 800488c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800488e:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	429a      	cmp	r2, r3
 800489c:	d209      	bcs.n	80048b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800489e:	4b12      	ldr	r3, [pc, #72]	; (80048e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3304      	adds	r3, #4
 80048a8:	4619      	mov	r1, r3
 80048aa:	4610      	mov	r0, r2
 80048ac:	f7fe fbab 	bl	8003006 <vListInsert>
}
 80048b0:	e010      	b.n	80048d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048b2:	4b0e      	ldr	r3, [pc, #56]	; (80048ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f7fe fba1 	bl	8003006 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048c4:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d202      	bcs.n	80048d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80048ce:	4a08      	ldr	r2, [pc, #32]	; (80048f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	6013      	str	r3, [r2, #0]
}
 80048d4:	bf00      	nop
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000d94 	.word	0x20000d94
 80048e0:	200008bc 	.word	0x200008bc
 80048e4:	20000d7c 	.word	0x20000d7c
 80048e8:	20000d4c 	.word	0x20000d4c
 80048ec:	20000d48 	.word	0x20000d48
 80048f0:	20000db0 	.word	0x20000db0

080048f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08a      	sub	sp, #40	; 0x28
 80048f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80048fe:	f000 fb07 	bl	8004f10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004902:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <xTimerCreateTimerTask+0x80>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d021      	beq.n	800494e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800490e:	2300      	movs	r3, #0
 8004910:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004912:	1d3a      	adds	r2, r7, #4
 8004914:	f107 0108 	add.w	r1, r7, #8
 8004918:	f107 030c 	add.w	r3, r7, #12
 800491c:	4618      	mov	r0, r3
 800491e:	f7fe fb07 	bl	8002f30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	9202      	str	r2, [sp, #8]
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	2302      	movs	r3, #2
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	2300      	movs	r3, #0
 8004932:	460a      	mov	r2, r1
 8004934:	4910      	ldr	r1, [pc, #64]	; (8004978 <xTimerCreateTimerTask+0x84>)
 8004936:	4811      	ldr	r0, [pc, #68]	; (800497c <xTimerCreateTimerTask+0x88>)
 8004938:	f7ff f8b4 	bl	8003aa4 <xTaskCreateStatic>
 800493c:	4603      	mov	r3, r0
 800493e:	4a10      	ldr	r2, [pc, #64]	; (8004980 <xTimerCreateTimerTask+0x8c>)
 8004940:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004942:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <xTimerCreateTimerTask+0x8c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800494a:	2301      	movs	r3, #1
 800494c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	613b      	str	r3, [r7, #16]
}
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800496a:	697b      	ldr	r3, [r7, #20]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000dec 	.word	0x20000dec
 8004978:	08005a6c 	.word	0x08005a6c
 800497c:	08004ab9 	.word	0x08004ab9
 8004980:	20000df0 	.word	0x20000df0

08004984 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08a      	sub	sp, #40	; 0x28
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
 8004990:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004992:	2300      	movs	r3, #0
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	623b      	str	r3, [r7, #32]
}
 80049ae:	bf00      	nop
 80049b0:	e7fe      	b.n	80049b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049b2:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <xTimerGenericCommand+0x98>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d02a      	beq.n	8004a10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b05      	cmp	r3, #5
 80049ca:	dc18      	bgt.n	80049fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049cc:	f7ff feb2 	bl	8004734 <xTaskGetSchedulerState>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d109      	bne.n	80049ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049d6:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <xTimerGenericCommand+0x98>)
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	f107 0110 	add.w	r1, r7, #16
 80049de:	2300      	movs	r3, #0
 80049e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e2:	f7fe fc77 	bl	80032d4 <xQueueGenericSend>
 80049e6:	6278      	str	r0, [r7, #36]	; 0x24
 80049e8:	e012      	b.n	8004a10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049ea:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <xTimerGenericCommand+0x98>)
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	f107 0110 	add.w	r1, r7, #16
 80049f2:	2300      	movs	r3, #0
 80049f4:	2200      	movs	r2, #0
 80049f6:	f7fe fc6d 	bl	80032d4 <xQueueGenericSend>
 80049fa:	6278      	str	r0, [r7, #36]	; 0x24
 80049fc:	e008      	b.n	8004a10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80049fe:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <xTimerGenericCommand+0x98>)
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	f107 0110 	add.w	r1, r7, #16
 8004a06:	2300      	movs	r3, #0
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	f7fe fd61 	bl	80034d0 <xQueueGenericSendFromISR>
 8004a0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3728      	adds	r7, #40	; 0x28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000dec 	.word	0x20000dec

08004a20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a2a:	4b22      	ldr	r3, [pc, #136]	; (8004ab4 <prvProcessExpiredTimer+0x94>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe fb1d 	bl	8003078 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d022      	beq.n	8004a92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	699a      	ldr	r2, [r3, #24]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	18d1      	adds	r1, r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	6978      	ldr	r0, [r7, #20]
 8004a5a:	f000 f8d1 	bl	8004c00 <prvInsertTimerInActiveList>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01f      	beq.n	8004aa4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a64:	2300      	movs	r3, #0
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	6978      	ldr	r0, [r7, #20]
 8004a70:	f7ff ff88 	bl	8004984 <xTimerGenericCommand>
 8004a74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d113      	bne.n	8004aa4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	60fb      	str	r3, [r7, #12]
}
 8004a8e:	bf00      	nop
 8004a90:	e7fe      	b.n	8004a90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a98:	f023 0301 	bic.w	r3, r3, #1
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	6978      	ldr	r0, [r7, #20]
 8004aaa:	4798      	blx	r3
}
 8004aac:	bf00      	nop
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000de4 	.word	0x20000de4

08004ab8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ac0:	f107 0308 	add.w	r3, r7, #8
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 f857 	bl	8004b78 <prvGetNextExpireTime>
 8004aca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f803 	bl	8004adc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ad6:	f000 f8d5 	bl	8004c84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ada:	e7f1      	b.n	8004ac0 <prvTimerTask+0x8>

08004adc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ae6:	f7ff fa39 	bl	8003f5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004aea:	f107 0308 	add.w	r3, r7, #8
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f866 	bl	8004bc0 <prvSampleTimeNow>
 8004af4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d130      	bne.n	8004b5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10a      	bne.n	8004b18 <prvProcessTimerOrBlockTask+0x3c>
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d806      	bhi.n	8004b18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b0a:	f7ff fa35 	bl	8003f78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b0e:	68f9      	ldr	r1, [r7, #12]
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff ff85 	bl	8004a20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b16:	e024      	b.n	8004b62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <prvProcessTimerOrBlockTask+0x90>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <prvProcessTimerOrBlockTask+0x50>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <prvProcessTimerOrBlockTask+0x52>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b30:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <prvProcessTimerOrBlockTask+0x94>)
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f7fe ff7d 	bl	8003a3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b42:	f7ff fa19 	bl	8003f78 <xTaskResumeAll>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b4c:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <prvProcessTimerOrBlockTask+0x98>)
 8004b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	f3bf 8f6f 	isb	sy
}
 8004b5c:	e001      	b.n	8004b62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b5e:	f7ff fa0b 	bl	8003f78 <xTaskResumeAll>
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000de8 	.word	0x20000de8
 8004b70:	20000dec 	.word	0x20000dec
 8004b74:	e000ed04 	.word	0xe000ed04

08004b78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b80:	4b0e      	ldr	r3, [pc, #56]	; (8004bbc <prvGetNextExpireTime+0x44>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <prvGetNextExpireTime+0x16>
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	e000      	b.n	8004b90 <prvGetNextExpireTime+0x18>
 8004b8e:	2200      	movs	r2, #0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d105      	bne.n	8004ba8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b9c:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <prvGetNextExpireTime+0x44>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	e001      	b.n	8004bac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004bac:	68fb      	ldr	r3, [r7, #12]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20000de4 	.word	0x20000de4

08004bc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004bc8:	f7ff fa74 	bl	80040b4 <xTaskGetTickCount>
 8004bcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004bce:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <prvSampleTimeNow+0x3c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d205      	bcs.n	8004be4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004bd8:	f000 f936 	bl	8004e48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	e002      	b.n	8004bea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004bea:	4a04      	ldr	r2, [pc, #16]	; (8004bfc <prvSampleTimeNow+0x3c>)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000df4 	.word	0x20000df4

08004c00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d812      	bhi.n	8004c4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	1ad2      	subs	r2, r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d302      	bcc.n	8004c3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c34:	2301      	movs	r3, #1
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	e01b      	b.n	8004c72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c3a:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <prvInsertTimerInActiveList+0x7c>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3304      	adds	r3, #4
 8004c42:	4619      	mov	r1, r3
 8004c44:	4610      	mov	r0, r2
 8004c46:	f7fe f9de 	bl	8003006 <vListInsert>
 8004c4a:	e012      	b.n	8004c72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d206      	bcs.n	8004c62 <prvInsertTimerInActiveList+0x62>
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d302      	bcc.n	8004c62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e007      	b.n	8004c72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c62:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <prvInsertTimerInActiveList+0x80>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f7fe f9ca 	bl	8003006 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c72:	697b      	ldr	r3, [r7, #20]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20000de8 	.word	0x20000de8
 8004c80:	20000de4 	.word	0x20000de4

08004c84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08e      	sub	sp, #56	; 0x38
 8004c88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c8a:	e0ca      	b.n	8004e22 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	da18      	bge.n	8004cc4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c92:	1d3b      	adds	r3, r7, #4
 8004c94:	3304      	adds	r3, #4
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	61fb      	str	r3, [r7, #28]
}
 8004cb0:	bf00      	nop
 8004cb2:	e7fe      	b.n	8004cb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cba:	6850      	ldr	r0, [r2, #4]
 8004cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cbe:	6892      	ldr	r2, [r2, #8]
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f2c0 80ab 	blt.w	8004e22 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d004      	beq.n	8004ce2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7fe f9cb 	bl	8003078 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ce2:	463b      	mov	r3, r7
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff ff6b 	bl	8004bc0 <prvSampleTimeNow>
 8004cea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b09      	cmp	r3, #9
 8004cf0:	f200 8096 	bhi.w	8004e20 <prvProcessReceivedCommands+0x19c>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <prvProcessReceivedCommands+0x78>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d25 	.word	0x08004d25
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d25 	.word	0x08004d25
 8004d08:	08004d99 	.word	0x08004d99
 8004d0c:	08004dad 	.word	0x08004dad
 8004d10:	08004df7 	.word	0x08004df7
 8004d14:	08004d25 	.word	0x08004d25
 8004d18:	08004d25 	.word	0x08004d25
 8004d1c:	08004d99 	.word	0x08004d99
 8004d20:	08004dad 	.word	0x08004dad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	18d1      	adds	r1, r2, r3
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d44:	f7ff ff5c 	bl	8004c00 <prvInsertTimerInActiveList>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d069      	beq.n	8004e22 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d05e      	beq.n	8004e22 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	441a      	add	r2, r3
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	2300      	movs	r3, #0
 8004d72:	2100      	movs	r1, #0
 8004d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d76:	f7ff fe05 	bl	8004984 <xTimerGenericCommand>
 8004d7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d14f      	bne.n	8004e22 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	61bb      	str	r3, [r7, #24]
}
 8004d94:	bf00      	nop
 8004d96:	e7fe      	b.n	8004d96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004daa:	e03a      	b.n	8004e22 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	617b      	str	r3, [r7, #20]
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	18d1      	adds	r1, r2, r3
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004df0:	f7ff ff06 	bl	8004c00 <prvInsertTimerInActiveList>
					break;
 8004df4:	e015      	b.n	8004e22 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d103      	bne.n	8004e0c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e06:	f000 fbdb 	bl	80055c0 <vPortFree>
 8004e0a:	e00a      	b.n	8004e22 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e1e:	e000      	b.n	8004e22 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004e20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <prvProcessReceivedCommands+0x1c0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	1d39      	adds	r1, r7, #4
 8004e28:	2200      	movs	r2, #0
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fe fbec 	bl	8003608 <xQueueReceive>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f47f af2a 	bne.w	8004c8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	3730      	adds	r7, #48	; 0x30
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000dec 	.word	0x20000dec

08004e48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e4e:	e048      	b.n	8004ee2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e50:	4b2d      	ldr	r3, [pc, #180]	; (8004f08 <prvSwitchTimerLists+0xc0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e5a:	4b2b      	ldr	r3, [pc, #172]	; (8004f08 <prvSwitchTimerLists+0xc0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3304      	adds	r3, #4
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fe f905 	bl	8003078 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d02e      	beq.n	8004ee2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d90e      	bls.n	8004eb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ea2:	4b19      	ldr	r3, [pc, #100]	; (8004f08 <prvSwitchTimerLists+0xc0>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4610      	mov	r0, r2
 8004eae:	f7fe f8aa 	bl	8003006 <vListInsert>
 8004eb2:	e016      	b.n	8004ee2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f7ff fd60 	bl	8004984 <xTimerGenericCommand>
 8004ec4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10a      	bne.n	8004ee2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	603b      	str	r3, [r7, #0]
}
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ee2:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <prvSwitchTimerLists+0xc0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1b1      	bne.n	8004e50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004eec:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <prvSwitchTimerLists+0xc0>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ef2:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <prvSwitchTimerLists+0xc4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a04      	ldr	r2, [pc, #16]	; (8004f08 <prvSwitchTimerLists+0xc0>)
 8004ef8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004efa:	4a04      	ldr	r2, [pc, #16]	; (8004f0c <prvSwitchTimerLists+0xc4>)
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	6013      	str	r3, [r2, #0]
}
 8004f00:	bf00      	nop
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20000de4 	.word	0x20000de4
 8004f0c:	20000de8 	.word	0x20000de8

08004f10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f16:	f000 f965 	bl	80051e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f1a:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <prvCheckForValidListAndQueue+0x60>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d120      	bne.n	8004f64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f22:	4814      	ldr	r0, [pc, #80]	; (8004f74 <prvCheckForValidListAndQueue+0x64>)
 8004f24:	f7fe f81e 	bl	8002f64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f28:	4813      	ldr	r0, [pc, #76]	; (8004f78 <prvCheckForValidListAndQueue+0x68>)
 8004f2a:	f7fe f81b 	bl	8002f64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f2e:	4b13      	ldr	r3, [pc, #76]	; (8004f7c <prvCheckForValidListAndQueue+0x6c>)
 8004f30:	4a10      	ldr	r2, [pc, #64]	; (8004f74 <prvCheckForValidListAndQueue+0x64>)
 8004f32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f34:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <prvCheckForValidListAndQueue+0x70>)
 8004f36:	4a10      	ldr	r2, [pc, #64]	; (8004f78 <prvCheckForValidListAndQueue+0x68>)
 8004f38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	4b11      	ldr	r3, [pc, #68]	; (8004f84 <prvCheckForValidListAndQueue+0x74>)
 8004f40:	4a11      	ldr	r2, [pc, #68]	; (8004f88 <prvCheckForValidListAndQueue+0x78>)
 8004f42:	2110      	movs	r1, #16
 8004f44:	200a      	movs	r0, #10
 8004f46:	f7fe f929 	bl	800319c <xQueueGenericCreateStatic>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <prvCheckForValidListAndQueue+0x60>)
 8004f4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f50:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <prvCheckForValidListAndQueue+0x60>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <prvCheckForValidListAndQueue+0x60>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	490b      	ldr	r1, [pc, #44]	; (8004f8c <prvCheckForValidListAndQueue+0x7c>)
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fe fd42 	bl	80039e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f64:	f000 f96e 	bl	8005244 <vPortExitCritical>
}
 8004f68:	bf00      	nop
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000dec 	.word	0x20000dec
 8004f74:	20000dbc 	.word	0x20000dbc
 8004f78:	20000dd0 	.word	0x20000dd0
 8004f7c:	20000de4 	.word	0x20000de4
 8004f80:	20000de8 	.word	0x20000de8
 8004f84:	20000e98 	.word	0x20000e98
 8004f88:	20000df8 	.word	0x20000df8
 8004f8c:	08005a74 	.word	0x08005a74

08004f90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3b04      	subs	r3, #4
 8004fa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3b04      	subs	r3, #4
 8004fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f023 0201 	bic.w	r2, r3, #1
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3b04      	subs	r3, #4
 8004fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fc0:	4a0c      	ldr	r2, [pc, #48]	; (8004ff4 <pxPortInitialiseStack+0x64>)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3b14      	subs	r3, #20
 8004fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3b04      	subs	r3, #4
 8004fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f06f 0202 	mvn.w	r2, #2
 8004fde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3b20      	subs	r3, #32
 8004fe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	08004ff9 	.word	0x08004ff9

08004ff8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005002:	4b12      	ldr	r3, [pc, #72]	; (800504c <prvTaskExitError+0x54>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500a:	d00a      	beq.n	8005022 <prvTaskExitError+0x2a>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	60fb      	str	r3, [r7, #12]
}
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <prvTaskExitError+0x28>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	60bb      	str	r3, [r7, #8]
}
 8005034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005036:	bf00      	nop
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0fc      	beq.n	8005038 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800503e:	bf00      	nop
 8005040:	bf00      	nop
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	2000000c 	.word	0x2000000c

08005050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <pxCurrentTCBConst2>)
 8005052:	6819      	ldr	r1, [r3, #0]
 8005054:	6808      	ldr	r0, [r1, #0]
 8005056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505a:	f380 8809 	msr	PSP, r0
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f04f 0000 	mov.w	r0, #0
 8005066:	f380 8811 	msr	BASEPRI, r0
 800506a:	4770      	bx	lr
 800506c:	f3af 8000 	nop.w

08005070 <pxCurrentTCBConst2>:
 8005070:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop

08005078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005078:	4808      	ldr	r0, [pc, #32]	; (800509c <prvPortStartFirstTask+0x24>)
 800507a:	6800      	ldr	r0, [r0, #0]
 800507c:	6800      	ldr	r0, [r0, #0]
 800507e:	f380 8808 	msr	MSP, r0
 8005082:	f04f 0000 	mov.w	r0, #0
 8005086:	f380 8814 	msr	CONTROL, r0
 800508a:	b662      	cpsie	i
 800508c:	b661      	cpsie	f
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	df00      	svc	0
 8005098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800509a:	bf00      	nop
 800509c:	e000ed08 	.word	0xe000ed08

080050a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050a6:	4b46      	ldr	r3, [pc, #280]	; (80051c0 <xPortStartScheduler+0x120>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a46      	ldr	r2, [pc, #280]	; (80051c4 <xPortStartScheduler+0x124>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d10a      	bne.n	80050c6 <xPortStartScheduler+0x26>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	613b      	str	r3, [r7, #16]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050c6:	4b3e      	ldr	r3, [pc, #248]	; (80051c0 <xPortStartScheduler+0x120>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a3f      	ldr	r2, [pc, #252]	; (80051c8 <xPortStartScheduler+0x128>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d10a      	bne.n	80050e6 <xPortStartScheduler+0x46>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	60fb      	str	r3, [r7, #12]
}
 80050e2:	bf00      	nop
 80050e4:	e7fe      	b.n	80050e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050e6:	4b39      	ldr	r3, [pc, #228]	; (80051cc <xPortStartScheduler+0x12c>)
 80050e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	22ff      	movs	r2, #255	; 0xff
 80050f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005100:	78fb      	ldrb	r3, [r7, #3]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005108:	b2da      	uxtb	r2, r3
 800510a:	4b31      	ldr	r3, [pc, #196]	; (80051d0 <xPortStartScheduler+0x130>)
 800510c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800510e:	4b31      	ldr	r3, [pc, #196]	; (80051d4 <xPortStartScheduler+0x134>)
 8005110:	2207      	movs	r2, #7
 8005112:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005114:	e009      	b.n	800512a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005116:	4b2f      	ldr	r3, [pc, #188]	; (80051d4 <xPortStartScheduler+0x134>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3b01      	subs	r3, #1
 800511c:	4a2d      	ldr	r2, [pc, #180]	; (80051d4 <xPortStartScheduler+0x134>)
 800511e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	b2db      	uxtb	r3, r3
 8005128:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800512a:	78fb      	ldrb	r3, [r7, #3]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005132:	2b80      	cmp	r3, #128	; 0x80
 8005134:	d0ef      	beq.n	8005116 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005136:	4b27      	ldr	r3, [pc, #156]	; (80051d4 <xPortStartScheduler+0x134>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f1c3 0307 	rsb	r3, r3, #7
 800513e:	2b04      	cmp	r3, #4
 8005140:	d00a      	beq.n	8005158 <xPortStartScheduler+0xb8>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	60bb      	str	r3, [r7, #8]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005158:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <xPortStartScheduler+0x134>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <xPortStartScheduler+0x134>)
 8005160:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005162:	4b1c      	ldr	r3, [pc, #112]	; (80051d4 <xPortStartScheduler+0x134>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800516a:	4a1a      	ldr	r2, [pc, #104]	; (80051d4 <xPortStartScheduler+0x134>)
 800516c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	b2da      	uxtb	r2, r3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005176:	4b18      	ldr	r3, [pc, #96]	; (80051d8 <xPortStartScheduler+0x138>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a17      	ldr	r2, [pc, #92]	; (80051d8 <xPortStartScheduler+0x138>)
 800517c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005182:	4b15      	ldr	r3, [pc, #84]	; (80051d8 <xPortStartScheduler+0x138>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a14      	ldr	r2, [pc, #80]	; (80051d8 <xPortStartScheduler+0x138>)
 8005188:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800518c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800518e:	f000 f8dd 	bl	800534c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005192:	4b12      	ldr	r3, [pc, #72]	; (80051dc <xPortStartScheduler+0x13c>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005198:	f000 f8fc 	bl	8005394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800519c:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <xPortStartScheduler+0x140>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a0f      	ldr	r2, [pc, #60]	; (80051e0 <xPortStartScheduler+0x140>)
 80051a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80051a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051a8:	f7ff ff66 	bl	8005078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051ac:	f7ff f84c 	bl	8004248 <vTaskSwitchContext>
	prvTaskExitError();
 80051b0:	f7ff ff22 	bl	8004ff8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	e000ed00 	.word	0xe000ed00
 80051c4:	410fc271 	.word	0x410fc271
 80051c8:	410fc270 	.word	0x410fc270
 80051cc:	e000e400 	.word	0xe000e400
 80051d0:	20000ee8 	.word	0x20000ee8
 80051d4:	20000eec 	.word	0x20000eec
 80051d8:	e000ed20 	.word	0xe000ed20
 80051dc:	2000000c 	.word	0x2000000c
 80051e0:	e000ef34 	.word	0xe000ef34

080051e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	607b      	str	r3, [r7, #4]
}
 80051fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051fe:	4b0f      	ldr	r3, [pc, #60]	; (800523c <vPortEnterCritical+0x58>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3301      	adds	r3, #1
 8005204:	4a0d      	ldr	r2, [pc, #52]	; (800523c <vPortEnterCritical+0x58>)
 8005206:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005208:	4b0c      	ldr	r3, [pc, #48]	; (800523c <vPortEnterCritical+0x58>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d10f      	bne.n	8005230 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <vPortEnterCritical+0x5c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <vPortEnterCritical+0x4c>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	603b      	str	r3, [r7, #0]
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <vPortEnterCritical+0x4a>
	}
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	2000000c 	.word	0x2000000c
 8005240:	e000ed04 	.word	0xe000ed04

08005244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800524a:	4b12      	ldr	r3, [pc, #72]	; (8005294 <vPortExitCritical+0x50>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10a      	bne.n	8005268 <vPortExitCritical+0x24>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	607b      	str	r3, [r7, #4]
}
 8005264:	bf00      	nop
 8005266:	e7fe      	b.n	8005266 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005268:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <vPortExitCritical+0x50>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3b01      	subs	r3, #1
 800526e:	4a09      	ldr	r2, [pc, #36]	; (8005294 <vPortExitCritical+0x50>)
 8005270:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005272:	4b08      	ldr	r3, [pc, #32]	; (8005294 <vPortExitCritical+0x50>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d105      	bne.n	8005286 <vPortExitCritical+0x42>
 800527a:	2300      	movs	r3, #0
 800527c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	f383 8811 	msr	BASEPRI, r3
}
 8005284:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	2000000c 	.word	0x2000000c
	...

080052a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052a0:	f3ef 8009 	mrs	r0, PSP
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	4b15      	ldr	r3, [pc, #84]	; (8005300 <pxCurrentTCBConst>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	f01e 0f10 	tst.w	lr, #16
 80052b0:	bf08      	it	eq
 80052b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ba:	6010      	str	r0, [r2, #0]
 80052bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80052c4:	f380 8811 	msr	BASEPRI, r0
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f7fe ffba 	bl	8004248 <vTaskSwitchContext>
 80052d4:	f04f 0000 	mov.w	r0, #0
 80052d8:	f380 8811 	msr	BASEPRI, r0
 80052dc:	bc09      	pop	{r0, r3}
 80052de:	6819      	ldr	r1, [r3, #0]
 80052e0:	6808      	ldr	r0, [r1, #0]
 80052e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e6:	f01e 0f10 	tst.w	lr, #16
 80052ea:	bf08      	it	eq
 80052ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052f0:	f380 8809 	msr	PSP, r0
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	f3af 8000 	nop.w

08005300 <pxCurrentTCBConst>:
 8005300:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop

08005308 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	607b      	str	r3, [r7, #4]
}
 8005320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005322:	f7fe fed7 	bl	80040d4 <xTaskIncrementTick>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800532c:	4b06      	ldr	r3, [pc, #24]	; (8005348 <xPortSysTickHandler+0x40>)
 800532e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	2300      	movs	r3, #0
 8005336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	f383 8811 	msr	BASEPRI, r3
}
 800533e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	e000ed04 	.word	0xe000ed04

0800534c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <vPortSetupTimerInterrupt+0x34>)
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005356:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <vPortSetupTimerInterrupt+0x38>)
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800535c:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <vPortSetupTimerInterrupt+0x3c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a0a      	ldr	r2, [pc, #40]	; (800538c <vPortSetupTimerInterrupt+0x40>)
 8005362:	fba2 2303 	umull	r2, r3, r2, r3
 8005366:	099b      	lsrs	r3, r3, #6
 8005368:	4a09      	ldr	r2, [pc, #36]	; (8005390 <vPortSetupTimerInterrupt+0x44>)
 800536a:	3b01      	subs	r3, #1
 800536c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800536e:	4b04      	ldr	r3, [pc, #16]	; (8005380 <vPortSetupTimerInterrupt+0x34>)
 8005370:	2207      	movs	r2, #7
 8005372:	601a      	str	r2, [r3, #0]
}
 8005374:	bf00      	nop
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	e000e010 	.word	0xe000e010
 8005384:	e000e018 	.word	0xe000e018
 8005388:	20000000 	.word	0x20000000
 800538c:	10624dd3 	.word	0x10624dd3
 8005390:	e000e014 	.word	0xe000e014

08005394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80053a4 <vPortEnableVFP+0x10>
 8005398:	6801      	ldr	r1, [r0, #0]
 800539a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800539e:	6001      	str	r1, [r0, #0]
 80053a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053a2:	bf00      	nop
 80053a4:	e000ed88 	.word	0xe000ed88

080053a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80053ae:	f3ef 8305 	mrs	r3, IPSR
 80053b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b0f      	cmp	r3, #15
 80053b8:	d914      	bls.n	80053e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053ba:	4a17      	ldr	r2, [pc, #92]	; (8005418 <vPortValidateInterruptPriority+0x70>)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053c4:	4b15      	ldr	r3, [pc, #84]	; (800541c <vPortValidateInterruptPriority+0x74>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	7afa      	ldrb	r2, [r7, #11]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d20a      	bcs.n	80053e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	607b      	str	r3, [r7, #4]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053e4:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <vPortValidateInterruptPriority+0x78>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053ec:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <vPortValidateInterruptPriority+0x7c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d90a      	bls.n	800540a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	603b      	str	r3, [r7, #0]
}
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <vPortValidateInterruptPriority+0x60>
	}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	e000e3f0 	.word	0xe000e3f0
 800541c:	20000ee8 	.word	0x20000ee8
 8005420:	e000ed0c 	.word	0xe000ed0c
 8005424:	20000eec 	.word	0x20000eec

08005428 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08a      	sub	sp, #40	; 0x28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005430:	2300      	movs	r3, #0
 8005432:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005434:	f7fe fd92 	bl	8003f5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005438:	4b5b      	ldr	r3, [pc, #364]	; (80055a8 <pvPortMalloc+0x180>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005440:	f000 f920 	bl	8005684 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005444:	4b59      	ldr	r3, [pc, #356]	; (80055ac <pvPortMalloc+0x184>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	f040 8093 	bne.w	8005578 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01d      	beq.n	8005494 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005458:	2208      	movs	r2, #8
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4413      	add	r3, r2
 800545e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	2b00      	cmp	r3, #0
 8005468:	d014      	beq.n	8005494 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f023 0307 	bic.w	r3, r3, #7
 8005470:	3308      	adds	r3, #8
 8005472:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <pvPortMalloc+0x6c>
	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	617b      	str	r3, [r7, #20]
}
 8005490:	bf00      	nop
 8005492:	e7fe      	b.n	8005492 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d06e      	beq.n	8005578 <pvPortMalloc+0x150>
 800549a:	4b45      	ldr	r3, [pc, #276]	; (80055b0 <pvPortMalloc+0x188>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d869      	bhi.n	8005578 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054a4:	4b43      	ldr	r3, [pc, #268]	; (80055b4 <pvPortMalloc+0x18c>)
 80054a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054a8:	4b42      	ldr	r3, [pc, #264]	; (80055b4 <pvPortMalloc+0x18c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054ae:	e004      	b.n	80054ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d903      	bls.n	80054cc <pvPortMalloc+0xa4>
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1f1      	bne.n	80054b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054cc:	4b36      	ldr	r3, [pc, #216]	; (80055a8 <pvPortMalloc+0x180>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d050      	beq.n	8005578 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2208      	movs	r2, #8
 80054dc:	4413      	add	r3, r2
 80054de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	1ad2      	subs	r2, r2, r3
 80054f0:	2308      	movs	r3, #8
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d91f      	bls.n	8005538 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4413      	add	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <pvPortMalloc+0xf8>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	613b      	str	r3, [r7, #16]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	1ad2      	subs	r2, r2, r3
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005532:	69b8      	ldr	r0, [r7, #24]
 8005534:	f000 f908 	bl	8005748 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005538:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <pvPortMalloc+0x188>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <pvPortMalloc+0x188>)
 8005544:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005546:	4b1a      	ldr	r3, [pc, #104]	; (80055b0 <pvPortMalloc+0x188>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4b1b      	ldr	r3, [pc, #108]	; (80055b8 <pvPortMalloc+0x190>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d203      	bcs.n	800555a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005552:	4b17      	ldr	r3, [pc, #92]	; (80055b0 <pvPortMalloc+0x188>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <pvPortMalloc+0x190>)
 8005558:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	4b13      	ldr	r3, [pc, #76]	; (80055ac <pvPortMalloc+0x184>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	431a      	orrs	r2, r3
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800556e:	4b13      	ldr	r3, [pc, #76]	; (80055bc <pvPortMalloc+0x194>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3301      	adds	r3, #1
 8005574:	4a11      	ldr	r2, [pc, #68]	; (80055bc <pvPortMalloc+0x194>)
 8005576:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005578:	f7fe fcfe 	bl	8003f78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <pvPortMalloc+0x174>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	60fb      	str	r3, [r7, #12]
}
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <pvPortMalloc+0x172>
	return pvReturn;
 800559c:	69fb      	ldr	r3, [r7, #28]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3728      	adds	r7, #40	; 0x28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20004af8 	.word	0x20004af8
 80055ac:	20004b0c 	.word	0x20004b0c
 80055b0:	20004afc 	.word	0x20004afc
 80055b4:	20004af0 	.word	0x20004af0
 80055b8:	20004b00 	.word	0x20004b00
 80055bc:	20004b04 	.word	0x20004b04

080055c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d04d      	beq.n	800566e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055d2:	2308      	movs	r3, #8
 80055d4:	425b      	negs	r3, r3
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4413      	add	r3, r2
 80055da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	4b24      	ldr	r3, [pc, #144]	; (8005678 <vPortFree+0xb8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <vPortFree+0x44>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	60fb      	str	r3, [r7, #12]
}
 8005600:	bf00      	nop
 8005602:	e7fe      	b.n	8005602 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <vPortFree+0x62>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	60bb      	str	r3, [r7, #8]
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	4b14      	ldr	r3, [pc, #80]	; (8005678 <vPortFree+0xb8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4013      	ands	r3, r2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01e      	beq.n	800566e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d11a      	bne.n	800566e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	4b0e      	ldr	r3, [pc, #56]	; (8005678 <vPortFree+0xb8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	43db      	mvns	r3, r3
 8005642:	401a      	ands	r2, r3
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005648:	f7fe fc88 	bl	8003f5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	4b0a      	ldr	r3, [pc, #40]	; (800567c <vPortFree+0xbc>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4413      	add	r3, r2
 8005656:	4a09      	ldr	r2, [pc, #36]	; (800567c <vPortFree+0xbc>)
 8005658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800565a:	6938      	ldr	r0, [r7, #16]
 800565c:	f000 f874 	bl	8005748 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <vPortFree+0xc0>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3301      	adds	r3, #1
 8005666:	4a06      	ldr	r2, [pc, #24]	; (8005680 <vPortFree+0xc0>)
 8005668:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800566a:	f7fe fc85 	bl	8003f78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800566e:	bf00      	nop
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20004b0c 	.word	0x20004b0c
 800567c:	20004afc 	.word	0x20004afc
 8005680:	20004b08 	.word	0x20004b08

08005684 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800568a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800568e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005690:	4b27      	ldr	r3, [pc, #156]	; (8005730 <prvHeapInit+0xac>)
 8005692:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00c      	beq.n	80056b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3307      	adds	r3, #7
 80056a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0307 	bic.w	r3, r3, #7
 80056aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	4a1f      	ldr	r2, [pc, #124]	; (8005730 <prvHeapInit+0xac>)
 80056b4:	4413      	add	r3, r2
 80056b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056bc:	4a1d      	ldr	r2, [pc, #116]	; (8005734 <prvHeapInit+0xb0>)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056c2:	4b1c      	ldr	r3, [pc, #112]	; (8005734 <prvHeapInit+0xb0>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	4413      	add	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056d0:	2208      	movs	r2, #8
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	1a9b      	subs	r3, r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0307 	bic.w	r3, r3, #7
 80056de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4a15      	ldr	r2, [pc, #84]	; (8005738 <prvHeapInit+0xb4>)
 80056e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056e6:	4b14      	ldr	r3, [pc, #80]	; (8005738 <prvHeapInit+0xb4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2200      	movs	r2, #0
 80056ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056ee:	4b12      	ldr	r3, [pc, #72]	; (8005738 <prvHeapInit+0xb4>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	1ad2      	subs	r2, r2, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005704:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <prvHeapInit+0xb4>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	4a0a      	ldr	r2, [pc, #40]	; (800573c <prvHeapInit+0xb8>)
 8005712:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	4a09      	ldr	r2, [pc, #36]	; (8005740 <prvHeapInit+0xbc>)
 800571a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800571c:	4b09      	ldr	r3, [pc, #36]	; (8005744 <prvHeapInit+0xc0>)
 800571e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005722:	601a      	str	r2, [r3, #0]
}
 8005724:	bf00      	nop
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	20000ef0 	.word	0x20000ef0
 8005734:	20004af0 	.word	0x20004af0
 8005738:	20004af8 	.word	0x20004af8
 800573c:	20004b00 	.word	0x20004b00
 8005740:	20004afc 	.word	0x20004afc
 8005744:	20004b0c 	.word	0x20004b0c

08005748 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005750:	4b28      	ldr	r3, [pc, #160]	; (80057f4 <prvInsertBlockIntoFreeList+0xac>)
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	e002      	b.n	800575c <prvInsertBlockIntoFreeList+0x14>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	429a      	cmp	r2, r3
 8005764:	d8f7      	bhi.n	8005756 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	4413      	add	r3, r2
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	429a      	cmp	r2, r3
 8005776:	d108      	bne.n	800578a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	441a      	add	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	441a      	add	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d118      	bne.n	80057d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4b15      	ldr	r3, [pc, #84]	; (80057f8 <prvInsertBlockIntoFreeList+0xb0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d00d      	beq.n	80057c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	441a      	add	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	e008      	b.n	80057d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057c6:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <prvInsertBlockIntoFreeList+0xb0>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e003      	b.n	80057d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d002      	beq.n	80057e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057e6:	bf00      	nop
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	20004af0 	.word	0x20004af0
 80057f8:	20004af8 	.word	0x20004af8

080057fc <memset>:
 80057fc:	4402      	add	r2, r0
 80057fe:	4603      	mov	r3, r0
 8005800:	4293      	cmp	r3, r2
 8005802:	d100      	bne.n	8005806 <memset+0xa>
 8005804:	4770      	bx	lr
 8005806:	f803 1b01 	strb.w	r1, [r3], #1
 800580a:	e7f9      	b.n	8005800 <memset+0x4>

0800580c <_reclaim_reent>:
 800580c:	4b29      	ldr	r3, [pc, #164]	; (80058b4 <_reclaim_reent+0xa8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4283      	cmp	r3, r0
 8005812:	b570      	push	{r4, r5, r6, lr}
 8005814:	4604      	mov	r4, r0
 8005816:	d04b      	beq.n	80058b0 <_reclaim_reent+0xa4>
 8005818:	69c3      	ldr	r3, [r0, #28]
 800581a:	b143      	cbz	r3, 800582e <_reclaim_reent+0x22>
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d144      	bne.n	80058ac <_reclaim_reent+0xa0>
 8005822:	69e3      	ldr	r3, [r4, #28]
 8005824:	6819      	ldr	r1, [r3, #0]
 8005826:	b111      	cbz	r1, 800582e <_reclaim_reent+0x22>
 8005828:	4620      	mov	r0, r4
 800582a:	f000 f879 	bl	8005920 <_free_r>
 800582e:	6961      	ldr	r1, [r4, #20]
 8005830:	b111      	cbz	r1, 8005838 <_reclaim_reent+0x2c>
 8005832:	4620      	mov	r0, r4
 8005834:	f000 f874 	bl	8005920 <_free_r>
 8005838:	69e1      	ldr	r1, [r4, #28]
 800583a:	b111      	cbz	r1, 8005842 <_reclaim_reent+0x36>
 800583c:	4620      	mov	r0, r4
 800583e:	f000 f86f 	bl	8005920 <_free_r>
 8005842:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005844:	b111      	cbz	r1, 800584c <_reclaim_reent+0x40>
 8005846:	4620      	mov	r0, r4
 8005848:	f000 f86a 	bl	8005920 <_free_r>
 800584c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800584e:	b111      	cbz	r1, 8005856 <_reclaim_reent+0x4a>
 8005850:	4620      	mov	r0, r4
 8005852:	f000 f865 	bl	8005920 <_free_r>
 8005856:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005858:	b111      	cbz	r1, 8005860 <_reclaim_reent+0x54>
 800585a:	4620      	mov	r0, r4
 800585c:	f000 f860 	bl	8005920 <_free_r>
 8005860:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005862:	b111      	cbz	r1, 800586a <_reclaim_reent+0x5e>
 8005864:	4620      	mov	r0, r4
 8005866:	f000 f85b 	bl	8005920 <_free_r>
 800586a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800586c:	b111      	cbz	r1, 8005874 <_reclaim_reent+0x68>
 800586e:	4620      	mov	r0, r4
 8005870:	f000 f856 	bl	8005920 <_free_r>
 8005874:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005876:	b111      	cbz	r1, 800587e <_reclaim_reent+0x72>
 8005878:	4620      	mov	r0, r4
 800587a:	f000 f851 	bl	8005920 <_free_r>
 800587e:	6a23      	ldr	r3, [r4, #32]
 8005880:	b1b3      	cbz	r3, 80058b0 <_reclaim_reent+0xa4>
 8005882:	4620      	mov	r0, r4
 8005884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005888:	4718      	bx	r3
 800588a:	5949      	ldr	r1, [r1, r5]
 800588c:	b941      	cbnz	r1, 80058a0 <_reclaim_reent+0x94>
 800588e:	3504      	adds	r5, #4
 8005890:	69e3      	ldr	r3, [r4, #28]
 8005892:	2d80      	cmp	r5, #128	; 0x80
 8005894:	68d9      	ldr	r1, [r3, #12]
 8005896:	d1f8      	bne.n	800588a <_reclaim_reent+0x7e>
 8005898:	4620      	mov	r0, r4
 800589a:	f000 f841 	bl	8005920 <_free_r>
 800589e:	e7c0      	b.n	8005822 <_reclaim_reent+0x16>
 80058a0:	680e      	ldr	r6, [r1, #0]
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 f83c 	bl	8005920 <_free_r>
 80058a8:	4631      	mov	r1, r6
 80058aa:	e7ef      	b.n	800588c <_reclaim_reent+0x80>
 80058ac:	2500      	movs	r5, #0
 80058ae:	e7ef      	b.n	8005890 <_reclaim_reent+0x84>
 80058b0:	bd70      	pop	{r4, r5, r6, pc}
 80058b2:	bf00      	nop
 80058b4:	2000005c 	.word	0x2000005c

080058b8 <__libc_init_array>:
 80058b8:	b570      	push	{r4, r5, r6, lr}
 80058ba:	4d0d      	ldr	r5, [pc, #52]	; (80058f0 <__libc_init_array+0x38>)
 80058bc:	4c0d      	ldr	r4, [pc, #52]	; (80058f4 <__libc_init_array+0x3c>)
 80058be:	1b64      	subs	r4, r4, r5
 80058c0:	10a4      	asrs	r4, r4, #2
 80058c2:	2600      	movs	r6, #0
 80058c4:	42a6      	cmp	r6, r4
 80058c6:	d109      	bne.n	80058dc <__libc_init_array+0x24>
 80058c8:	4d0b      	ldr	r5, [pc, #44]	; (80058f8 <__libc_init_array+0x40>)
 80058ca:	4c0c      	ldr	r4, [pc, #48]	; (80058fc <__libc_init_array+0x44>)
 80058cc:	f000 f880 	bl	80059d0 <_init>
 80058d0:	1b64      	subs	r4, r4, r5
 80058d2:	10a4      	asrs	r4, r4, #2
 80058d4:	2600      	movs	r6, #0
 80058d6:	42a6      	cmp	r6, r4
 80058d8:	d105      	bne.n	80058e6 <__libc_init_array+0x2e>
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e0:	4798      	blx	r3
 80058e2:	3601      	adds	r6, #1
 80058e4:	e7ee      	b.n	80058c4 <__libc_init_array+0xc>
 80058e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ea:	4798      	blx	r3
 80058ec:	3601      	adds	r6, #1
 80058ee:	e7f2      	b.n	80058d6 <__libc_init_array+0x1e>
 80058f0:	08005b50 	.word	0x08005b50
 80058f4:	08005b50 	.word	0x08005b50
 80058f8:	08005b50 	.word	0x08005b50
 80058fc:	08005b54 	.word	0x08005b54

08005900 <__retarget_lock_acquire_recursive>:
 8005900:	4770      	bx	lr

08005902 <__retarget_lock_release_recursive>:
 8005902:	4770      	bx	lr

08005904 <memcpy>:
 8005904:	440a      	add	r2, r1
 8005906:	4291      	cmp	r1, r2
 8005908:	f100 33ff 	add.w	r3, r0, #4294967295
 800590c:	d100      	bne.n	8005910 <memcpy+0xc>
 800590e:	4770      	bx	lr
 8005910:	b510      	push	{r4, lr}
 8005912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800591a:	4291      	cmp	r1, r2
 800591c:	d1f9      	bne.n	8005912 <memcpy+0xe>
 800591e:	bd10      	pop	{r4, pc}

08005920 <_free_r>:
 8005920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005922:	2900      	cmp	r1, #0
 8005924:	d044      	beq.n	80059b0 <_free_r+0x90>
 8005926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800592a:	9001      	str	r0, [sp, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f1a1 0404 	sub.w	r4, r1, #4
 8005932:	bfb8      	it	lt
 8005934:	18e4      	addlt	r4, r4, r3
 8005936:	f000 f83f 	bl	80059b8 <__malloc_lock>
 800593a:	4a1e      	ldr	r2, [pc, #120]	; (80059b4 <_free_r+0x94>)
 800593c:	9801      	ldr	r0, [sp, #4]
 800593e:	6813      	ldr	r3, [r2, #0]
 8005940:	b933      	cbnz	r3, 8005950 <_free_r+0x30>
 8005942:	6063      	str	r3, [r4, #4]
 8005944:	6014      	str	r4, [r2, #0]
 8005946:	b003      	add	sp, #12
 8005948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800594c:	f000 b83a 	b.w	80059c4 <__malloc_unlock>
 8005950:	42a3      	cmp	r3, r4
 8005952:	d908      	bls.n	8005966 <_free_r+0x46>
 8005954:	6825      	ldr	r5, [r4, #0]
 8005956:	1961      	adds	r1, r4, r5
 8005958:	428b      	cmp	r3, r1
 800595a:	bf01      	itttt	eq
 800595c:	6819      	ldreq	r1, [r3, #0]
 800595e:	685b      	ldreq	r3, [r3, #4]
 8005960:	1949      	addeq	r1, r1, r5
 8005962:	6021      	streq	r1, [r4, #0]
 8005964:	e7ed      	b.n	8005942 <_free_r+0x22>
 8005966:	461a      	mov	r2, r3
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	b10b      	cbz	r3, 8005970 <_free_r+0x50>
 800596c:	42a3      	cmp	r3, r4
 800596e:	d9fa      	bls.n	8005966 <_free_r+0x46>
 8005970:	6811      	ldr	r1, [r2, #0]
 8005972:	1855      	adds	r5, r2, r1
 8005974:	42a5      	cmp	r5, r4
 8005976:	d10b      	bne.n	8005990 <_free_r+0x70>
 8005978:	6824      	ldr	r4, [r4, #0]
 800597a:	4421      	add	r1, r4
 800597c:	1854      	adds	r4, r2, r1
 800597e:	42a3      	cmp	r3, r4
 8005980:	6011      	str	r1, [r2, #0]
 8005982:	d1e0      	bne.n	8005946 <_free_r+0x26>
 8005984:	681c      	ldr	r4, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	6053      	str	r3, [r2, #4]
 800598a:	440c      	add	r4, r1
 800598c:	6014      	str	r4, [r2, #0]
 800598e:	e7da      	b.n	8005946 <_free_r+0x26>
 8005990:	d902      	bls.n	8005998 <_free_r+0x78>
 8005992:	230c      	movs	r3, #12
 8005994:	6003      	str	r3, [r0, #0]
 8005996:	e7d6      	b.n	8005946 <_free_r+0x26>
 8005998:	6825      	ldr	r5, [r4, #0]
 800599a:	1961      	adds	r1, r4, r5
 800599c:	428b      	cmp	r3, r1
 800599e:	bf04      	itt	eq
 80059a0:	6819      	ldreq	r1, [r3, #0]
 80059a2:	685b      	ldreq	r3, [r3, #4]
 80059a4:	6063      	str	r3, [r4, #4]
 80059a6:	bf04      	itt	eq
 80059a8:	1949      	addeq	r1, r1, r5
 80059aa:	6021      	streq	r1, [r4, #0]
 80059ac:	6054      	str	r4, [r2, #4]
 80059ae:	e7ca      	b.n	8005946 <_free_r+0x26>
 80059b0:	b003      	add	sp, #12
 80059b2:	bd30      	pop	{r4, r5, pc}
 80059b4:	20004c4c 	.word	0x20004c4c

080059b8 <__malloc_lock>:
 80059b8:	4801      	ldr	r0, [pc, #4]	; (80059c0 <__malloc_lock+0x8>)
 80059ba:	f7ff bfa1 	b.w	8005900 <__retarget_lock_acquire_recursive>
 80059be:	bf00      	nop
 80059c0:	20004c48 	.word	0x20004c48

080059c4 <__malloc_unlock>:
 80059c4:	4801      	ldr	r0, [pc, #4]	; (80059cc <__malloc_unlock+0x8>)
 80059c6:	f7ff bf9c 	b.w	8005902 <__retarget_lock_release_recursive>
 80059ca:	bf00      	nop
 80059cc:	20004c48 	.word	0x20004c48

080059d0 <_init>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	bf00      	nop
 80059d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d6:	bc08      	pop	{r3}
 80059d8:	469e      	mov	lr, r3
 80059da:	4770      	bx	lr

080059dc <_fini>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr
